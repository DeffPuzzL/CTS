/**************************************************************************************************
    文 件 名：demo.pc
    代码作者：DeffPuzzL
    编写版本：
    创建日期：2016-07-14
    功能描述：demo实现业务模块
 **************************************************************************************************/
#include    "settle_txn.h"
#include    "algo.h"

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
#include    "tbl_mcht_fund.h"
#include    "tbl_settle_txn.h"
#include    "tbl_settle_err.h"
EXEC SQL END DECLARE SECTION;

/**************************************************************************************************
    方法定义
 **************************************************************************************************/
CSettle::stEvent CSettle::m_stEvent[] =
{
    {"settle",       		&CSettle::vGenSettleTxn },
    {"update",          	&CSettle::vUpdSettleTxn },
    { "", NULL }
};

/**************************************************************************************************
    函 数 名：CSettle()
    功能描述：构造函数
    返回说明：
 **************************************************************************************************/
CSettle::CSettle()
{

}

/**************************************************************************************************
    函 数 名：~CSettle()
    功能描述：析构函数
    返回说明：
 **************************************************************************************************/
CSettle::~CSettle()
{


}

/**************************************************************************************************
    函 数 名：lRunObject(char* in_szClass, char* in_szAction)
    功能描述：运行类中的方法
    返回说明：
        RC_SUCC         --成功
        RC_FAIL         --失败
 **************************************************************************************************/
long    CSettle::lRunObject(char *in_szClass, char *in_szAction)
{
    int     i = 0;
    char    *p, szAction[256];

    memset(szAction, 0, sizeof(szAction));

    if ((p = strstr(in_szAction, "__")) != NULL)
    {
        strncpy(szAction, in_szAction, p - in_szAction);
    }
    else
    {
        strcpy(szAction, in_szAction);
    }

    while (0 != strcmp(m_stEvent[i].m_szName, ""))
    {
        if (0 == strcmp(m_stEvent[i].m_szName, szAction))
        {
            (this->*m_stEvent[i].m_pEvent)();
            return RC_SUCC;
        }

        i++;
    }

    SYSError(RET_SYSTEM, "组件(%s)的事件(%s)没注册", in_szClass, in_szAction);
    return RC_FAIL;
}

/**************************************************************************************************
    函 数 名：vGenSettleTxn()
    功能描述：统计本周期商户资金
    返回说明：
        无
 **************************************************************************************************/
void    CSettle::vGenSettleTxn()
{
	EXEC SQL BEGIN DECLARE SECTION;
	TMchtFund	stFund;
	TSettleTxn	stSettle;
	char		szDate[9], szNum[5], szFlag[2];
	char		szOrder[33], szTime[15], szRedo[2], szMertNo[21];
	EXEC SQL END DECLARE SECTION;
	dbMchtAcct	stAcct;
	double		dAmt = 0.00;
	long		lCount = 0, lSeqNo, lNewSeq = 0;
    GCts   		*pstCts = (GCts *)pGetGloble();
	SATvm       *pstSamo = (SATvm *)pGetSATvm();

	memset(szNum, 0, sizeof(szNum));
	memset(szDate, 0, sizeof(szDate));
	memset(szFlag, 0, sizeof(szFlag));
	memset(szRedo, 0, sizeof(szRedo));
	memset(szTime, 0, sizeof(szTime));
	memset(szOrder, 0, sizeof(szOrder));
	memset(szMertNo, 0, sizeof(szMertNo));
	IBPgetstring("BAT_InNum", szNum, "批次编号");
	IBPgetstring("BAT_PayMcht", szMertNo, "代付商户号");
	IBPgetstring("BAT_PayOrder", szOrder, "代付请求订单号");
	IBPgetstring("BAT_PayTime", szTime, "代付清算时间");
	IBPgetstring("BAT_SettleDate", szDate, "清算日期");
    if(IBPIserr())
        return ;

    IBPrace("开始处理日期(%s)商户代付清算流水批次(%s)", szDate, szNum);

	szFlag[0] = SETTLE_MCHT_NOTDEAL;
	szRedo[0] = SETTLE_MCHT_RESETT;

	EXEC SQL DECLARE Cur_mcht_fund CURSOR FOR 
		SELECT * FROM TBL_MCHT_FUND 
	WHERE SETTLE_DATE = :szDate AND RESULT_FLAG IN (:szFlag, :szRedo) 
		AND SETTLE_NUM = :szNum AND MERT_NO = :szMertNo;

	EXEC SQL OPEN Cur_mcht_fund;
    if(SQLCODE)
    {
        SYSError(RET_DATABASE, "打开游标失败, err:(%d)(%s)", SQLCODE, sDbsError());
        return ;
    }

	lSeqNo = pstCts->m_lSeqNo;
    while (1)
    {
		memset(&stFund, 0, sizeof(TMchtFund));
        EXEC SQL FETCH Cur_mcht_fund INTO :stFund;
        if(SQLERR)
        {
            SYSError(RET_DATABASE, "汇总商户资金失败, err:(%d)(%s)", SQLCODE, sDbsError());
            break;
        }
        if(SQLNOTFOUND)
            break;

		++ lCount;
		memset(&stSettle, 0, sizeof(TSettleTxn));
		dAmt += stFund.settle_amt;
		stSettle.settle_amt = stFund.settle_amt;
		strncpy(stSettle.currency, "CNY", sizeof(stSettle.currency));
		snprintf(stSettle.id, sizeof(stSettle.id), "%s%012d", pstCts->m_szTxDate, lSeqNo ++);
		snprintf(stSettle.trace_no, sizeof(stSettle.trace_no), "%s%012d", stSettle.settle_date + 1, lSeqNo);
		strncpy(stSettle.pay_order, stFund.id, sizeof(stSettle.pay_order) - 1);
		strncpy(stSettle.settle_date, szDate, sizeof(stSettle.settle_date) - 1);
		strncpy(stSettle.tx_date, stFund.tx_date, sizeof(stSettle.tx_date) - 1);
		strncpy(stSettle.settle_num, stFund.settle_num, sizeof(stSettle.settle_num) - 1);
		strncpy(stSettle.channel_no, stFund.channel_no, sizeof(stSettle.channel_no) - 1);
		strncpy(stSettle.mert_no, stFund.mert_no, sizeof(stSettle.mert_no) - 1);
		strncpy(stSettle.mert_nm, stFund.mert_nm, sizeof(stSettle.mert_nm) - 1);
		strncpy(stSettle.order_req, szOrder, sizeof(stSettle.order_req) - 1);
		strncpy(stSettle.order_time, szTime, sizeof(stSettle.order_time) - 1);
		strncpy(stSettle.pay_acct, sGetDbsEnv(stSettle.channel_no), sizeof(stSettle.pay_acct) - 1);

		if(RC_SUCC != lGetMchtAcct(&stAcct, stSettle.mert_no))
		{
			SYSError(RET_SYSTEM, "获取商户(%s)账户信息失败, err:(%s)", stSettle.mert_no, 
				sGetError(pstSamo));
			continue;
		}

		stSettle.result_flag[0] = SETTLE_IN_FLAG_PREQ;
		strncpy(stSettle.acct_no, stAcct.acct_no, sizeof(stSettle.acct_no));
		strncpy(stSettle.acct_nm, stAcct.acct_nm, sizeof(stSettle.acct_nm));
		strncpy(stSettle.acct_type, stAcct.acct_type, sizeof(stSettle.acct_type));
		strncpy(stSettle.acct_bank_no, stAcct.acct_bank_no, sizeof(stSettle.acct_bank_no));
		strncpy(stSettle.acct_bank_nm, stAcct.acct_bank_nm, sizeof(stSettle.acct_bank_nm));
		strncpy(stSettle.acct_zbank_no, stAcct.acct_zbank_no, sizeof(stSettle.acct_zbank_no));
		strncpy(stSettle.acct_zbank_nm, stAcct.acct_zbank_nm, sizeof(stSettle.acct_zbank_nm));
		strncpy(stSettle.acct_zbank_addr, stAcct.acct_zbank_addr, sizeof(stSettle.acct_zbank_addr));
		strncpy(stSettle.acct_zbank_code, stAcct.acct_zbank_code, sizeof(stSettle.acct_zbank_code));
		strncpy(stSettle.acct_net_no, stAcct.acct_net_no, sizeof(stSettle.acct_net_no));
		strncpy(stSettle.acct_union_no, stAcct.acct_union_no, sizeof(stSettle.acct_union_no));
		strncpy(stSettle.cert_type, stAcct.cert_type, sizeof(stSettle.cert_type) - 1);
		strncpy(stSettle.cert_no, stAcct.cert_no, sizeof(stSettle.cert_no) - 1);
		strncpy(stSettle.resv_phone, stAcct.resv_phone, sizeof(stSettle.resv_phone) - 1);
		strncpy(stSettle.create_time, sGetCurrentTime(), sizeof(stSettle.create_time) - 1);

		EXEC SQL INSERT INTO TBL_SETTLE_TXN VALUES(:stSettle);
    	if(SQLCODE)
    	{
        	SYSError(RET_DATABASE, "新增(%s)商户(%s)代发数据失败, err:(%d)(%s)", stSettle.id, 
				stSettle.mert_no, SQLCODE, sDbsError());
			EXEC SQL CLOSE Cur_mcht_fund;
        	return ;
    	}

		strncpy(stSettle.order_req, szOrder, sizeof(stSettle.order_req) - 1);
		strncpy(stSettle.order_time, szTime, sizeof(stSettle.order_time) - 1);
		EXEC SQL UPDATE TBL_MCHT_FUND SET
			ORDER_REQ  = :stSettle.order_req,
			ORDER_TIME = :stSettle.order_time,
			UPDATE_TIME= :stSettle.create_time
		WHERE ID = :stFund.id;
    	if(SQLCODE)
    	{
        	SYSError(RET_DATABASE, "修改(%s)商户代发数据失败, err:(%d)(%s)", stFund.id, 
				SQLCODE, sDbsError());
			EXEC SQL CLOSE Cur_mcht_fund;
        	return ;
    	}

        EXEC SQL COMMIT WORK;

		vResetBussPool();
		IBPputlong("loop", 1);
		IBPputstring("id", stSettle.id);
		IBPputstring("acct_no", stSettle.acct_no);
		IBPputstring("acct_nm", stSettle.acct_nm);
		IBPputstring("cert_no", stSettle.cert_no);
		IBPputstring("pay_acct", stSettle.pay_acct);
		IBPputstring("cert_type", stSettle.cert_type);
		if('0' == stSettle.acct_type[0])
			stSettle.acct_type[0] = '1';
		else
			stSettle.acct_type[0] = '2';
		IBPputstring("acct_type", stSettle.acct_type);
		IBPputdouble("settle_amt", stSettle.settle_amt);
		IBPputstring("acct_net_no", stSettle.acct_net_no);
		IBPputstring("acct_union_no", stSettle.acct_union_no);
		IBPputstring("acct_bank_no", stSettle.acct_bank_no);
		IBPputstring("acct_bank_nm", stSettle.acct_bank_nm);
		IBPputstring("acct_zbank_no", stSettle.acct_zbank_no);
		IBPputstring("acct_zbank_nm", stSettle.acct_zbank_nm);
		IBPputstring("acct_zbank_addr", stSettle.acct_zbank_addr);
		IBPputstring("acct_zbank_code", stSettle.acct_zbank_code);

		if(RC_FAIL == (lNewSeq = lNewTrade(pstSamo, pstCts, "200000")))
		{
			stSettle.result_flag[0] = SETTLE_IN_FLAG_FAIL;
			strncpy(stSettle.status, pstCts->m_szRetCode, sizeof(stSettle.status) - 1);
			strncpy(stSettle.status_msg, pstCts->m_szRetMsg, sizeof(stSettle.status_msg) - 1);
			
			EXEC SQL UPDATE TBL_SETTLE_TXN SET
				RESULT_FLAG     = :stSettle.result_flag,
				STATUS          = :stSettle.status,
				STATUS_MSG      = :stSettle.status_msg,
				UPDATE_TIME     = :stSettle.update_time
			WHERE ID = :stSettle.id;
			if (SQLCODE)
			{
			   	SYSError(RET_DATABASE, "更新清算流水(%s)失败, err:(%d)(%s)", stSettle.id, 	
					SQLCODE, sDbsError());
			  	return ;
			}
        	EXEC SQL COMMIT WORK;
			break;
		}
	}
	EXEC SQL CLOSE Cur_mcht_fund;

    IBPrace("处理日期(%s)商户代付清算笔数(%d), 金额(%.2f)", szDate, lCount, dAmt);

	return ;
}

/**************************************************************************************************
    函 数 名：vCountErrFound()
    功能描述：统计本周期商户资金
    返回说明：
        无
 **************************************************************************************************/
void    CSettle::vUpdSettleTxn()
{
	EXEC SQL BEGIN DECLARE SECTION;
	TMchtFund	stFund;
	TSettleErr	stError;
	TSettleTxn	stSettle;
	char		szCode[20];
	EXEC SQL END DECLARE SECTION;
	long		lCount = 0, lSeqNo = 0;
    GCts   		*pstCts = (GCts *)pGetGloble();

	memset(szCode, 0, sizeof(szCode));
	memset(&stFund, 0, sizeof(TMchtFund));
	memset(&stError, 0, sizeof(TSettleErr));
	memset(&stSettle, 0, sizeof(TSettleTxn));
	IBPgetdefstring("BAT_BankSeqNo", stSettle.bank_seqno, "");
	IBPgetdefstring("BAT_BankBatNo", stSettle.bank_batch_no, "");
	IBPgetstring("BAT_BankCode", stSettle.bank_status, "");
	IBPgetstring("BAT_BankMsg", stSettle.bank_status_msg, "");
	IBPgetstring("BAT_OrderSerial", stSettle.id, "idx");
	IBPgetstring("BAT_Status", stSettle.result_flag, "业务响应码");
	IBPgetstring("BAT_BussCode", stSettle.status, "业务响应码");
	IBPgetstring("BAT_BussMsg", stSettle.status_msg, "业务响应信息");
	strncpy(stSettle.in_date, pstCts->m_szTxDate, sizeof(stSettle.in_date));
	strncpy(stSettle.update_time, sGetCurrentTime(), sizeof(stSettle.update_time));
    if(IBPIserr())
        return ;

	EXEC SQL UPDATE TBL_SETTLE_TXN SET
		RESULT_FLAG     = :stSettle.result_flag,
		IN_DATE			= :stSettle.in_date,	
		STATUS          = :stSettle.status,
		STATUS_MSG      = :stSettle.status_msg,
		BANK_STATUS     = :stSettle.bank_status,
		BANK_STATUS_MSG = :stSettle.bank_status_msg,
		BANK_BATCH_NO   = :stSettle.bank_batch_no,
		BANK_SEQNO      = :stSettle.bank_seqno,
		UPDATE_TIME     = :stSettle.update_time
	WHERE ID = :stSettle.id;
   	if (SQLCODE)
   	{
       	SYSError(RET_DATABASE, "更新清算流水(%s)失败, err:(%d)(%s)", stSettle.id, 	
			SQLCODE, sDbsError());
      	return ;
   	}

	EXEC SQL SELECT * INTO :stSettle FROM TBL_SETTLE_TXN WHERE ID = :stSettle.id;
   	if(SQLCODE)
   	{
       	SYSError(RET_DATABASE, "获取清算流水(%s)失败, err:(%d)(%s)", stSettle.id, 	
			SQLCODE, sDbsError());
      	return ;
   	}

	if(SETTLE_IN_FLAG_SUCC == stSettle.result_flag[0])
	{
		stFund.result_flag[0] = SETTLE_MCHT_SUCC;
		stError.err_type[0] = ERROR_ER_SETTLE_SUCC;
	}
	else if(SETTLE_IN_FLAG_FAIL == stSettle.result_flag[0]) 
	{
		stFund.result_flag[0] = SETTLE_MCHT_ERROR;
		stError.err_type[0] = ERROR_ER_SETTLE_FAIL;
	}
	else
	{
		stFund.result_flag[0] = SETTLE_MCHT_PUTREQ;
		stError.err_type[0] = ERROR_ER_SETTLE_UNKOWN;
	}

	EXEC SQL UPDATE TBL_MCHT_FUND SET
		RESULT_FLAG = :stSettle.result_flag,	
		RESULT_DESC = :stSettle.status_msg,
		IN_DATE		= :stSettle.in_date,	
		PAY_TIME	= :stSettle.update_time,	
		UPDATE_TIME = :stSettle.update_time
	WHERE ID = :stSettle.pay_order;
	if(SQLCODE || EFFECT_NUM != 1)
    {
		SYSError(RET_DATABASE, "更新商户汇总(%s)失败, err:(%d)(%s)", stSettle.mert_no, 
			SQLCODE, sDbsError());
		return ;
	} 

	//	处理差错TBL_SETTLE_ERR表记录
	EXEC SQL SELECT * INTO :stError FROM TBL_SETTLE_ERR WHERE ID = :stSettle.pay_order;
	if(SQLERR)
	{
        SYSError(RET_DATABASE, "查询户汇总(%s)入账失败表失败, err:(%d)(%s)", stSettle.mert_no,
            SQLCODE, sDbsError());
        return ;
	}
	else if(SQLNOTFOUND)
	{
		if(SETTLE_IN_FLAG_SUCC == stSettle.result_flag[0])
			return ;
		
		stError.do_flag[0] = SETTLE_ERR_NOT_DEAL;

		EXEC SQL INSERT INTO TBL_SETTLE_ERR (ID, SETTLE_DATE, IN_DATE, TX_DATE, SETTLE_NUM, 
			CHANNEL_NO, BATCH_NO, TRACE_NO, DO_FLAG, ERR_TYPE, MERT_NO, MERT_NM, ORDER_REQ, 
			ORDER_TIME, SETTLE_AMT, CURRENCY, STATUS, STATUS_MSG, BANK_STATUS, BANK_STATUS_MSG, 
			BANK_BATCH_NO, BANK_SEQNO, RESV_PHONE, ACCT_NO, ACCT_NM, ACCT_TYPE, ACCT_BANK_NO, 
			ACCT_BANK_NM, ACCT_ZBANK_NO, ACCT_ZBANK_NM, ACCT_ZBANK_ADDR, ACCT_ZBANK_CODE, 
			ACCT_UNION_NO, ACCT_NET_NO, REMARK, CERT_TYPE, CERT_NO, EXT_PROPERTIES, CREATE_TIME) 
		SELECT PAY_ORDER, SETTLE_DATE, :stSettle.in_date, TX_DATE, SETTLE_NUM, CHANNEL_NO, 
			BATCH_NO, TRACE_NO, :stError.do_flag, :stError.err_type, MERT_NO, MERT_NM, 
			ORDER_REQ, ORDER_TIME, SETTLE_AMT, CURRENCY, STATUS, STATUS_MSG, BANK_STATUS, 
			BANK_STATUS_MSG, BANK_BATCH_NO, BANK_SEQNO, RESV_PHONE, ACCT_NO, ACCT_NM, 
			ACCT_TYPE, ACCT_BANK_NO, ACCT_BANK_NM, ACCT_ZBANK_NO, ACCT_ZBANK_NM, 
			ACCT_ZBANK_ADDR, ACCT_ZBANK_CODE, ACCT_UNION_NO, ACCT_NET_NO, REMARK, CERT_TYPE, 
			CERT_NO, EXT_PROPERTIES, :stSettle.update_time
		FROM TBL_SETTLE_TXN WHERE ID = :stSettle.id;
	}
	else
	{
    	EXEC SQL UPDATE TBL_SETTLE_ERR SET ID = ID WHERE ID = :stSettle.id;
    	if(SQL_UD_ERR)
    	{
        	SYSError(RET_DATABASE, "锁定入账差错记录(%s)失败, err:(%d)(%s)", stSettle.id, 
				SQLCODE, sDbsError());
        	return ;
    	}
	
		if(SETTLE_MCHT_SUCC == stFund.result_flag[0])
			stError.do_flag[0] = SETTLE_ERR_SETTLE_SUCC;

		EXEC SQL UPDATE TBL_SETTLE_ERR SET 
			DO_FLAG         = :stError.do_flag,
			ERR_TYPE		= :stError.err_type,
			IN_DATE			= :stSettle.in_date,	
			STATUS          = :stSettle.status,
			STATUS_MSG      = :stSettle.status_msg,
			BANK_STATUS     = :stSettle.bank_status,
			BANK_STATUS_MSG = :stSettle.bank_status_msg,
			BANK_BATCH_NO   = :stSettle.bank_batch_no,
			BANK_SEQNO      = :stSettle.bank_seqno,
			ORDER_REQ       = :stSettle.order_req,
            ORDER_TIME      = :stSettle.order_time,
			CURRENCY        = :stSettle.currency,
			RESV_PHONE      = :stSettle.resv_phone,
			ACCT_NO         = :stSettle.acct_no,
			ACCT_NM         = :stSettle.acct_nm,
			ACCT_TYPE       = :stSettle.acct_type,
			ACCT_BANK_NO    = :stSettle.acct_bank_no,
			ACCT_BANK_NM    = :stSettle.acct_bank_nm,
			ACCT_ZBANK_NO   = :stSettle.acct_zbank_no,
			ACCT_ZBANK_NM   = :stSettle.acct_zbank_nm,
			ACCT_ZBANK_ADDR = :stSettle.acct_zbank_addr,
			ACCT_ZBANK_CODE = :stSettle.acct_zbank_code,
			ACCT_UNION_NO   = :stSettle.acct_union_no,
			ACCT_NET_NO     = :stSettle.acct_net_no,
			CERT_TYPE       = :stSettle.cert_type,
			CERT_NO         = :stSettle.cert_no,
			UPDATE_TIME     = :stSettle.update_time
		WHERE ID = :stSettle.pay_order;
	}
	if(SQLCODE)
	{
       	SYSError(RET_DATABASE, "操作入账失败表(%s)失败, err:(%d)(%s)", stSettle.id, 
			SQLCODE, sDbsError());
		return ;
	}

    return ;
}

/*************************************************************************************************
    code end
**************************************************************************************************/

/*
 *  Copyright 2006, Shanghai Huateng Software Systems Co., Ltd.
 *  All right reserved.
 *
 *  THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF SHANGHAI HUATENG
 *  SOFTWARE SYSTEMS CO., LTD.  THE CONTENTS OF THIS FILE MAY NOT
 *  BE DISCLOSED TO THIRD PARTIES, COPIED OR DUPLICATED IN ANY FORM,
 *  IN WHOLE OR IN PART, WITHOUT THE PRIOR WRITTEN PERMISSION OF
 *  SHANGHAI HUATENG SOFTWARE SYSTEMS CO., LTD.
 *
 *  $Id$
 *
 *  function: table tbl_r_sync_mcht operator function
 *
 *  Edit History:
 *
 *    2017/08/15 09:18:27 by gendb
 */
 
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "dbs/dbsdef.h"
EXEC SQL include sqlca;
EXEC SQL include sqlda;


EXEC SQL BEGIN DECLARE SECTION;
struct TBL_R_SYNC_MCHT_Def {
    int        id;    /* 自增ID */
    char       status[2];    /* 状态：0-启用 1-停用 */
    char       local_mcht_no[21];    /* 本地商户号 */
    char       local_mcht_nm[257];    /* 本地商户名 */
    char       channel_nm[5];    /* 通道编号 */
    char       channel_mcht_no[129];    /* 通道商户号 */
    char       channel_mcht_nm[257];    /* 通道商户名 */
    char       resv[129];    /* 备注 */
    char       create_tm[15];    /* 创建时间 */
    char       lupd_tm[15];    /* 更新时间 */
    char       app_id[33];    /* 通道AppId */
    char       channel_key[1001];    /*  */
    char       sub_app_id[33];    /* 子公众号编号 */
    char       sub_app_secret[65];    /* 子公众号密钥 */
    char       app_secret[65];    /* 公众号密钥 */
    char       syn_flag[3];    /* 0-通道 其他-大商户 */
    char       expires_in[11];    /* 密钥有效期 */
    char       re_expires_in[11];    /* 刷新密钥有效期 */
    char       app_refresh_token[1001];    /* 刷新密钥 */
    char       brh_no[101];    /*  */
    int        syn_extra_result;    /* 同步附加结果 */
    char       ext_properties[2049];    /*  */
} ltTBL_R_SYNC_MCHT;
short s_ind;
char  s_count[33];
EXEC SQL END DECLARE SECTION;
/*************************************************************************/
/*    input : DBS_FUNC   the dbs func                                    */
/*            The struct pointer defined in upper.                       */
/*    return : the sqlca.sqlcode                                         */
/*************************************************************************/
int DbsTBL_R_SYNC_MCHT(int ifunc, struct TBL_R_SYNC_MCHT_Def *pTBL_R_SYNC_MCHT)
{
    memcpy(&ltTBL_R_SYNC_MCHT, pTBL_R_SYNC_MCHT, sizeof(ltTBL_R_SYNC_MCHT));

    switch (ifunc) {
    case DBS_SELECT1 :
        EXEC SQL SELECT
            CHANNEL_MCHT_NO
        INTO
            :ltTBL_R_SYNC_MCHT.channel_mcht_no :s_ind
        FROM
            tbl_r_sync_mcht
        WHERE
            STATUS = :ltTBL_R_SYNC_MCHT.status AND
            LOCAL_MCHT_NO = :ltTBL_R_SYNC_MCHT.local_mcht_no AND
            CHANNEL_NM = :ltTBL_R_SYNC_MCHT.channel_nm;

        memcpy(pTBL_R_SYNC_MCHT, &ltTBL_R_SYNC_MCHT, sizeof(ltTBL_R_SYNC_MCHT));
        break;

    case DBS_LOCK1 :
        EXEC SQL SELECT
            CHANNEL_MCHT_NO
        INTO
            :ltTBL_R_SYNC_MCHT.channel_mcht_no :s_ind
        FROM
            tbl_r_sync_mcht
        WHERE
            STATUS = :ltTBL_R_SYNC_MCHT.status AND
            LOCAL_MCHT_NO = :ltTBL_R_SYNC_MCHT.local_mcht_no AND
            CHANNEL_NM = :ltTBL_R_SYNC_MCHT.channel_nm
        for update;

        memcpy(pTBL_R_SYNC_MCHT, &ltTBL_R_SYNC_MCHT, sizeof(ltTBL_R_SYNC_MCHT));
        break;

    case DBS_INSERT :
        EXEC SQL INSERT INTO tbl_r_sync_mcht (
            ID ,
            STATUS ,
            LOCAL_MCHT_NO ,
            LOCAL_MCHT_NM ,
            CHANNEL_NM ,
            CHANNEL_MCHT_NO ,
            CHANNEL_MCHT_NM ,
            RESV ,
            CREATE_TM ,
            LUPD_TM ,
            APP_ID ,
            CHANNEL_KEY ,
            SUB_APP_ID ,
            SUB_APP_SECRET ,
            APP_SECRET ,
            SYN_FLAG ,
            EXPIRES_IN ,
            RE_EXPIRES_IN ,
            APP_REFRESH_TOKEN ,
            BRH_NO ,
            SYN_EXTRA_RESULT ,
            EXT_PROPERTIES
        ) VALUES (
            :ltTBL_R_SYNC_MCHT.id ,
            :ltTBL_R_SYNC_MCHT.status ,
            :ltTBL_R_SYNC_MCHT.local_mcht_no ,
            :ltTBL_R_SYNC_MCHT.local_mcht_nm ,
            :ltTBL_R_SYNC_MCHT.channel_nm ,
            :ltTBL_R_SYNC_MCHT.channel_mcht_no ,
            :ltTBL_R_SYNC_MCHT.channel_mcht_nm ,
            :ltTBL_R_SYNC_MCHT.resv ,
            :ltTBL_R_SYNC_MCHT.create_tm ,
            :ltTBL_R_SYNC_MCHT.lupd_tm ,
            :ltTBL_R_SYNC_MCHT.app_id ,
            :ltTBL_R_SYNC_MCHT.channel_key ,
            :ltTBL_R_SYNC_MCHT.sub_app_id ,
            :ltTBL_R_SYNC_MCHT.sub_app_secret ,
            :ltTBL_R_SYNC_MCHT.app_secret ,
            :ltTBL_R_SYNC_MCHT.syn_flag ,
            :ltTBL_R_SYNC_MCHT.expires_in ,
            :ltTBL_R_SYNC_MCHT.re_expires_in ,
            :ltTBL_R_SYNC_MCHT.app_refresh_token ,
            :ltTBL_R_SYNC_MCHT.brh_no ,
            :ltTBL_R_SYNC_MCHT.syn_extra_result ,
            :ltTBL_R_SYNC_MCHT.ext_properties
        );
        break;

    default :
        return DB_DBSFUNCERR;
    }

    return sqlca.sqlcode;
}


int DbsCntTBL_R_SYNC_MCHT(int ifunc, struct TBL_R_SYNC_MCHT_Def *pTBL_R_SYNC_MCHT, char *psCount, int nCntSize)
{
    memcpy(&ltTBL_R_SYNC_MCHT, pTBL_R_SYNC_MCHT, sizeof(ltTBL_R_SYNC_MCHT));

    memset(s_count, 0, sizeof(s_count));

    switch (ifunc) {
    default :
        return DB_DBSFUNCERR;
    }

    return sqlca.sqlcode;
}


int DbsStatTBL_R_SYNC_MCHT(int ifunc, struct TBL_R_SYNC_MCHT_Def *pTBL_R_SYNC_MCHT, char *psCount, int nCntSize)
{
    memcpy(&ltTBL_R_SYNC_MCHT, pTBL_R_SYNC_MCHT, sizeof(ltTBL_R_SYNC_MCHT));

    memset(s_count, 0, sizeof(s_count));

    switch (ifunc) {
    default :
        return DB_DBSFUNCERR;
    }

    return sqlca.sqlcode;
}

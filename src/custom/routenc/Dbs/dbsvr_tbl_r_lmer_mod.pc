/*
 *  Copyright 2006, Shanghai Huateng Software Systems Co., Ltd.
 *  All right reserved.
 *
 *  THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF SHANGHAI HUATENG
 *  SOFTWARE SYSTEMS CO., LTD.  THE CONTENTS OF THIS FILE MAY NOT
 *  BE DISCLOSED TO THIRD PARTIES, COPIED OR DUPLICATED IN ANY FORM,
 *  IN WHOLE OR IN PART, WITHOUT THE PRIOR WRITTEN PERMISSION OF
 *  SHANGHAI HUATENG SOFTWARE SYSTEMS CO., LTD.
 *
 *  $Id$
 *
 *  function: table tbl_r_lmer_mod operator function
 *
 *  Edit History:
 *
 *    2017/08/15 09:18:27 by gendb
 */
 
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "dbs/dbsdef.h"
EXEC SQL include sqlca;
EXEC SQL include sqlda;


EXEC SQL BEGIN DECLARE SECTION;
struct TBL_R_LMER_MOD_Def {
    int        id;    /* 交易模型编号(自增ID) */
    char       name[129];    /* 模型名称 */
    char       status[2];    /* 启用状态 0-正常使用 1-不启用  */
    int        priority;    /* 优先级 */
    char       oprate[21];    /* 关联通道操作 */
    char       resv[257];    /* 预留 */
    char       remark[1025];    /* 备注 */
} ltTBL_R_LMER_MOD;
short s_ind;
char  s_count[33];
EXEC SQL END DECLARE SECTION;
/*************************************************************************/
/*    input : DBS_FUNC   the dbs func                                    */
/*            The struct pointer defined in upper.                       */
/*    return : the sqlca.sqlcode                                         */
/*************************************************************************/
int DbsTBL_R_LMER_MOD(int ifunc, struct TBL_R_LMER_MOD_Def *pTBL_R_LMER_MOD)
{
    memcpy(&ltTBL_R_LMER_MOD, pTBL_R_LMER_MOD, sizeof(ltTBL_R_LMER_MOD));

    switch (ifunc) {
    case DBS_OPEN1 :
        EXEC SQL DECLARE
            cur_tbl_r_lmer_mod_1
        CURSOR FOR SELECT
            ID ,
            NAME ,
            STATUS ,
            PRIORITY ,
            OPRATE ,
            RESV ,
            REMARK
        FROM
            tbl_r_lmer_mod
        WHERE
            STATUS = :ltTBL_R_LMER_MOD.status
        ORDER BY
            PRIORITY desc;

        EXEC SQL OPEN cur_tbl_r_lmer_mod_1;
        break;

    case DBS_FETCH1 :
        EXEC SQL FETCH cur_tbl_r_lmer_mod_1
        INTO
            :ltTBL_R_LMER_MOD.id :s_ind ,
            :ltTBL_R_LMER_MOD.name :s_ind ,
            :ltTBL_R_LMER_MOD.status :s_ind ,
            :ltTBL_R_LMER_MOD.priority :s_ind ,
            :ltTBL_R_LMER_MOD.oprate :s_ind ,
            :ltTBL_R_LMER_MOD.resv :s_ind ,
            :ltTBL_R_LMER_MOD.remark :s_ind;

        memcpy(pTBL_R_LMER_MOD, &ltTBL_R_LMER_MOD, sizeof(ltTBL_R_LMER_MOD));
        break;

    case DBS_CLOSE1 :
        EXEC SQL CLOSE cur_tbl_r_lmer_mod_1;
        break;

    case DBS_INSERT :
        EXEC SQL INSERT INTO tbl_r_lmer_mod (
            ID ,
            NAME ,
            STATUS ,
            PRIORITY ,
            OPRATE ,
            RESV ,
            REMARK
        ) VALUES (
            :ltTBL_R_LMER_MOD.id ,
            :ltTBL_R_LMER_MOD.name ,
            :ltTBL_R_LMER_MOD.status ,
            :ltTBL_R_LMER_MOD.priority ,
            :ltTBL_R_LMER_MOD.oprate ,
            :ltTBL_R_LMER_MOD.resv ,
            :ltTBL_R_LMER_MOD.remark
        );
        break;

    default :
        return DB_DBSFUNCERR;
    }

    return sqlca.sqlcode;
}


int DbsCntTBL_R_LMER_MOD(int ifunc, struct TBL_R_LMER_MOD_Def *pTBL_R_LMER_MOD, char *psCount, int nCntSize)
{
    memcpy(&ltTBL_R_LMER_MOD, pTBL_R_LMER_MOD, sizeof(ltTBL_R_LMER_MOD));

    memset(s_count, 0, sizeof(s_count));

    switch (ifunc) {
    default :
        return DB_DBSFUNCERR;
    }

    return sqlca.sqlcode;
}


int DbsStatTBL_R_LMER_MOD(int ifunc, struct TBL_R_LMER_MOD_Def *pTBL_R_LMER_MOD, char *psCount, int nCntSize)
{
    memcpy(&ltTBL_R_LMER_MOD, pTBL_R_LMER_MOD, sizeof(ltTBL_R_LMER_MOD));

    memset(s_count, 0, sizeof(s_count));

    switch (ifunc) {
    default :
        return DB_DBSFUNCERR;
    }

    return sqlca.sqlcode;
}

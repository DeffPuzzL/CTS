/**************************************************************************************************
    文 件 名：clear_day.pcpp
    代码作者：DeffPuzzL
    编写版本：
    创建日期：2016-07-14
    功能描述：demo实现业务模块
 **************************************************************************************************/
#include    "algo.h"
#include    "clear_day.h"
#define     SQLCA_STORAGE_CLASS     extern
#include    "sqlca.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "tbl_bat_main_list.h"
EXEC SQL END DECLARE SECTION;

CMList          *g_pstCRoot;
Benum           g_eExit = RC_SUCC;

/**************************************************************************************************
    初始化内存定义
 **************************************************************************************************/

/**************************************************************************************************
    方法定义
 **************************************************************************************************/
CClear::stEvent CClear::m_stEvent[] =
{
    {"pause",                      &CClear::vSetSysPause },
    {"normal",                     &CClear::vSetSysNormal },
    {"dayend",                     &CClear::vSystemDayend },
    {"amtsfer",                    &CClear::vActAmtTrasfer },
    {"cache",                      &CClear::vCreateTvmTable },
    {"stlmday",                    &CClear::vGetSettleDay },
    {"script",                     &CClear::vExecuteScript },
    {"", NULL }
};

/**************************************************************************************************
    函 数 名：CClear()
    功能描述：构造函数
    返回说明：
 **************************************************************************************************/
CClear::CClear()
{

}

/**************************************************************************************************
    函 数 名：~CClear()
    功能描述：析构函数
    返回说明：
 **************************************************************************************************/
CClear::~CClear()
{

}

/**************************************************************************************************
    函 数 名：lRunObject(char* in_szClass, char* in_szAction)
    功能描述：运行类中的方法
    返回说明：
        RC_SUCC         --成功
        RC_FAIL         --失败
 **************************************************************************************************/
long    CClear::lRunObject(char* in_szClass, char* in_szAction)
{
    int     i = 0;
    char    *p, szAction[256];

    memset(szAction, 0, sizeof(szAction));
    if((p = strstr(in_szAction, "__")) != NULL)
        strncpy(szAction, in_szAction, p - in_szAction);
    else
        strcpy(szAction, in_szAction);

    while(0 != strcmp(m_stEvent[i].m_szName, ""))
    {
        if(0 == strcmp(m_stEvent[i].m_szName, szAction))
        {
            (this->*m_stEvent[i].m_pEvent)();
            return RC_SUCC;
        }
        i++;
    }

    SYSError(RET_SYSTEM, "组件(%s)的事件(%s)没注册", in_szClass, in_szAction);
    return RC_FAIL;
}

/**************************************************************************************************
    函 数 名：lSaveProcess(CMList **ppstRoot, long lPid)
    功能描述：
    返回说明：
 **************************************************************************************************/
long    lSaveProcess(CMList **ppstRoot, long lPid)
{
    CMList  *pstList = *ppstRoot;
    
    pstList = pInsertList(pstList, (void *)&lPid, sizeof(long));
    if(!pstList)
    {
        vDestroyList(pstList);
        return RC_FAIL;
    }
    
    *ppstRoot = pstList;
    
    return RC_SUCC;
}

/**************************************************************************************************
    函 数 名：vReCycleChild(int sig)
    功能描述：交易流水回收
    返回说明：
        无
 **************************************************************************************************/
void    vReCycleChild(int sig)
{
    long    lStatus = 0;
    pid_t   lPr = 0;

    //处理僵尸进程
    while((lPr = waitpid(-1, (int *)&lStatus, WNOHANG | WUNTRACED)) > 0)
    {
        g_pstCRoot = pDeleteNode(g_pstCRoot, (void *)&lPr, sizeof(lPr));
        /* 检查子进程退出状态 */
        if(WIFEXITED(lStatus))
        {
            if(RC_SUCC != WEXITSTATUS(lStatus)) //  判断退出返回值
                g_eExit = RC_FAIL;
        }
    }

    sigset(SIGCLD,  vReCycleChild);
    signal(SIGCHLD, vReCycleChild);
}

/**************************************************************************************************
    函 数 名：lCheckResource(SATvm *pstSavm)
    功能描述：清理平台日切之前的资源
    返回说明：
        RC_SUCC                --处理成功
        RC_FAIL                --处理失败
 **************************************************************************************************/
long    CClear::lCheckResource(SATvm *pstSavm)
{
    long    i, lCount = 0;
    GCts    *pstCts = (GCts *)pGetGloble();

	//	10s
    for(i = 0; i < 200 && 1 != lCount; i ++, usleep(50000))
    {
        if(RC_FAIL == (lCount = lCountTrade()))
        {
            SYSError(RET_SYSTEM, "统计平台交易失败, %s", sGetError());
            return RC_FAIL;
        }
    }

    if(1 != lCount)
    {
        IBPerror("平台还有未处理完的交易(%d)", lCount);
        return RC_FAIL;
    }

    if(RC_SUCC != lRecycleAsyn(pstSavm, pstCts->m_szCrDate))
    {
        SYSError(RET_SYSTEM, "回收(%s)异步标识失败, %s", pstCts->m_szCrDate, sGetError());
        return RC_FAIL;
    }

    return RC_SUCC;
}

/**************************************************************************************************
    函 数 名：vSetSysPause()
    功能描述：设置平台禁用
    返回说明：
        无
 **************************************************************************************************/
void	CClear::vSetSysPause()
{
	SATvm    *pstSavm = (SATvm *)pGetSATvm();

    if(RC_SUCC != lSetSysState(pstSavm, SYSTEM_PLT_STOP))
    {
        SYSError(RET_SYSTEM, "设置平台状态失败, %s", sGetTError(pstSavm->m_lErrno));
        return ;
    }
}

/**************************************************************************************************
    函 数 名：vSetSysNormal()
    功能描述：设置平台正常
    返回说明：
        无
 **************************************************************************************************/
void	CClear::vSetSysNormal()
{
	SATvm    *pstSavm = (SATvm *)pGetSATvm();

    if(RC_SUCC != lSetSysState(pstSavm, SYSTEM_PLT_START))
    {
        SYSError(RET_SYSTEM, "设置平台状态失败, %s", sGetTError(pstSavm->m_lErrno));
        return ;
    }
}

/**************************************************************************************************
    函 数 名：vActAmtTrasfer()
    功能描述：日切未入账金额转移
    返回说明：
        无
 **************************************************************************************************/
void    CClear::vActAmtTrasfer()
{
    EXEC SQL BEGIN DECLARE SECTION;
    long    lCount = 0;
    char    szFlag[2], szType[2], szTime[15];
    EXEC SQL END DECLARE SECTION;

    memset(szType, 0, sizeof(szType));
    memset(szFlag, 0, sizeof(szFlag));
    memset(szTime, 0, sizeof(szTime));
    szType[0] =  ACCOUNT_MERT_NO;
    szFlag[0] =  ACCOUNT_STAT_OK;
    memcpy(szTime, sGetCurrentTime(), 14);

    //  业务后续这里可以在核对明细
	//	先对明细，在对笔数?, 后续开发




    EXEC SQL UPDATE TBL_CASH_ACCOUNT SET
        TOTAL_AMT = 0.00,
        TOTAL_FEE = 0.00,
        TOTAL_PAY = 0.00,
        BALANCE_ING = BALANCE_ING + TRANS_AMT,
        TRANS_AMT   = 0.00,
        UPDATE_TIME = :szTime
    WHERE ACCOUNT_STATUS = :szFlag AND APP_TYPE = :szType AND
        TOTAL_AMT = TOTAL_FEE + TOTAL_PAY + TRANS_AMT;
    if(SQLERR)
    {
        SYSError(RET_DATABASE, "将商户资金转移至待入账, %s", sDbsError());
        return ;
    }

    EXEC SQL SELECT COUNT(*) INTO :lCount FROM TBL_CASH_ACCOUNT
        WHERE ACCOUNT_STATUS = :szFlag AND APP_TYPE = :szType AND
    TOTAL_AMT != TOTAL_FEE + TOTAL_PAY + TRANS_AMT;
    if(SQLCODE)
    {
        SYSError(RET_DATABASE, "统计未入账资金账户个数失败, %s", sDbsError());
        return ;
    }

    if(lCount > 0)
    {
        SYSError(RET_DATABASE, "存在(%d)个商户账户资金异常, 请核对!", lCount);
        return ;
    }

    IBPrace("将商户未入账金额转移成功，设计商户个数:(%d)", lDbsEffectCnt());
    return ;
}

/**************************************************************************************************
    函 数 名：vSystemDayend()
    功能描述：平台日切重置日期&流水号
    返回说明：
        无
 **************************************************************************************************/
void    CClear::vSystemDayend()
{
    CtsParam    stParam;
	char		szCrDate[9];
    SATvm       *pstSavm = (SATvm *)pGetSATvm();

	memset(szCrDate, 0, sizeof(szCrDate));
	IBPgetstring("TR_OprDate", szCrDate, "清算日期");
    if(IBPIserr())
        return;

	//	交易时间限制&日期验证 !!
	if(strcmp(szCrDate, sGetActDate()))
	{
        SYSError(RET_SYSTEM, "清算日期(%s)非法", szCrDate);
		return ;
	}

    if(RC_SUCC != lSetSysState(pstSavm, SYSTEM_PLT_STOP))
    {
        SYSError(RET_SYSTEM, "设置平台状态失败, %s", sGetTError(pstSavm->m_lErrno));
        return ;
    }

    memset(&stParam, 0, sizeof(CtsParam));
    strcpy(stParam.m_szTxDate, sGetTxDate());
    strcpy(stParam.m_szCrDate, sGetChgDate(szCrDate, 1));
    stParam.m_lSeqNo = atol(sGetDbsEnv("START_SEQNO"));
    stParam.m_lSeqNo = stParam.m_lSeqNo > 1 ? stParam.m_lSeqNo : 1;    
    if(RC_SUCC != lDayendParam(pstSavm, &stParam))
    {
        SYSError(RET_SYSTEM, "更新系统参数失败, %s", sGetTError(pstSavm->m_lErrno));
        return ;
    }

	if(RC_SUCC != lCheckResource(pstSavm))
		return ;

    IBPputstring("DAY_txdate", stParam.m_szTxDate);
    IBPputstring("DAY_cleardate", stParam.m_szCrDate);

    IBPrace("同步系统运行信息成功, 日期(%s)清算日期(%s)流水号(%d)", stParam.m_szTxDate,
        stParam.m_szCrDate, stParam.m_lSeqNo);
    return ;
}

/**************************************************************************************************
    函 数 名：vCreateTvmTable()
    功能描述：生成渠道信息
    返回说明：
        RC_SUCC      --成功
        RC_FAIL      --失败
 **************************************************************************************************/
void    CClear::vCreateTvmTable()
{
    size_t      i, lPid;
    SATvm       *pstSavm = (SATvm *)pGetSATvm();

    IBPrace("===============开始加载交易缓存表===============");
    vDbsDisconnect();
    sigset(SIGCLD,  vReCycleChild);
    signal(SIGCHLD, vReCycleChild);
    for(i = 0, g_pstCRoot = NULL; i < lGetCreateNum(); i ++) 
    {
        lPid = fork();
        if(lPid < 0)
        {
            SYSError(RET_SYSTEM, "fork子进程失败, err:(%s)", strerror(errno));
            break;
        }
        else if(lPid > 0)
        {
            if(RC_SUCC != lSaveProcess(&g_pstCRoot, lPid))
                return ;
            continue;
        }

        if(RC_SUCC != lDbsConnect(pGetDefCreate(i)->lDbsFrom))
        {
            SYSError(RET_DATABASE, "连接数据库失败, %s", sGetError());
            exit(RC_FAIL);
        }

	    if(RC_SUCC != pGetDefCreate(i)->pfCreate(pstSavm, NULL))
        {
            vDbsDisconnect();
            SYSError(RET_SYSTEM, "初始化表(0X%X)失败, %s", pGetDefCreate(i)->table, sGetError());
            exit(RC_FAIL);
        }

        IBPrace("进程(%d)初始化表(0X%X): %s", getpid(), pGetDefCreate(i)->table, sGetError());
        vDbsDisconnect();
        exit(RC_SUCC);      //  子进程全部退出
    }

    if(RC_SUCC != lDbsConnect(DBS_BATCH)) 
    {   
        SYSError(RET_DATABASE, "连接数据库失败, %s", sDbsError());
        return ;
    } 

    while(g_pstCRoot)
        usleep(10);

    if(RC_SUCC != lResetSAinit())
    {
        SYSError(RET_SYSTEM, "刷新二级缓存失败");
        return ;
    }

    signal(SIGCHLD, SIG_IGN);
    if(IBPIserr())
    {
        SYSError(RET_SYSTEM, "初始化平台内存业务表失败");
        return ;
    }

    if(RC_SUCC != lSetSysState(pstSavm, SYSTEM_PLT_START))
    {
        SYSError(RET_SYSTEM, "设置平台状态失败, %s", sGetTError(pstSavm->m_lErrno));
        return ;
    }

    return ;
}

/**************************************************************************************************
    函 数 名：vGetSettleDay()
    功能描述：生成渠道信息
    返回说明：
        RC_SUCC      --成功
        RC_FAIL      --失败
 **************************************************************************************************/
void    CClear::vGetSettleDay()
{
    EXEC SQL BEGIN DECLARE SECTION;
	char	szSettleDate[9], szTransDay[9];
    EXEC SQL END DECLARE SECTION;
	
	memset(szTransDay, 0, sizeof(szTransDay));
	memset(szSettleDate, 0, sizeof(szTransDay));
	IBPgetstring("tx_date", szTransDay, "交易日期");
    if(IBPIserr())
        return;

    EXEC SQL SELECT STLM_DATE INTO :szSettleDate FROM TBL_STLM_DATE
        WHERE TRANS_DATE = :szTransDay;
    if(SQLCODE)
    {
        SYSError(RET_DATABASE, "查询清算日期失败, %s", sDbsError());
        return ;
    }

	sTrimAll(szSettleDate);
	IBPputstring("settle_date", szSettleDate);

	return ;
}

/**************************************************************************************************
    函 数 名：vExecuteScript()
    功能描述：执行脚本
    返回说明：
        RC_SUCC      --成功
        RC_FAIL      --失败
 **************************************************************************************************/
void    CClear::vExecuteScript()
{
	char	szScript[256], szResult[256];
	
	memset(szResult, 0, sizeof(szResult));
	memset(szScript, 0, sizeof(szScript));
	IBPgetstring("ES_Script", szScript, "交易日期");
    if(IBPIserr())
        return;

	if(RC_SUCC != lGetCmdString(szScript, szResult, sizeof(szResult)))
	{
		SYSError(RET_SYSTEM, "执行脚本(%s)失败, %s", szScript, strerror(errno));
		return ;
	}

	IBPputstring("ER_Script", szResult);

	return ;
}

/*************************************************************************************************
    code end
**************************************************************************************************/

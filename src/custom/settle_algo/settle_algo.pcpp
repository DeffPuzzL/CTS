/**************************************************************************************************
    文 件 名：demo.pc
    代码作者：DeffPuzzL
    编写版本：
    创建日期：2016-07-14
    功能描述：demo实现业务模块
 **************************************************************************************************/
#include    "settle_algo.h"

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
#include    "tbl_order_err.h"
#include    "tbl_algo_dtls.h"
#include    "tbl_mcht_fund.h"
#include    "tbl_settle_txn.h"
#include    "tbl_settle_mon.h"
EXEC SQL END DECLARE SECTION;

/**************************************************************************************************
    方法定义
 **************************************************************************************************/
CClear::stEvent CClear::m_stEvent[] =
{
    {"settle",          &CClear::vGenSettleTxn },
    {"check",           &CClear::vChkSettleTxn },
    { "", NULL }
};

/**************************************************************************************************
    函 数 名：CClear()
    功能描述：构造函数
    返回说明：
 **************************************************************************************************/
CClear::CClear()
{

}

/**************************************************************************************************
    函 数 名：~CClear()
    功能描述：析构函数
    返回说明：
 **************************************************************************************************/
CClear::~CClear()
{


}

/**************************************************************************************************
    函 数 名：lRunObject(char* in_szClass, char* in_szAction)
    功能描述：运行类中的方法
    返回说明：
        RC_SUCC         --成功
        RC_FAIL         --失败
 **************************************************************************************************/
long    CClear::lRunObject(char *in_szClass, char *in_szAction)
{
    int     i = 0;
    char    *p, szAction[256];

    memset(szAction, 0, sizeof(szAction));

    if ((p = strstr(in_szAction, "__")) != NULL)
    {
        strncpy(szAction, in_szAction, p - in_szAction);
    }
    else
    {
        strcpy(szAction, in_szAction);
    }

    while (0 != strcmp(m_stEvent[i].m_szName, ""))
    {
        if (0 == strcmp(m_stEvent[i].m_szName, szAction))
        {
            (this->*m_stEvent[i].m_pEvent)();
            return RC_SUCC;
        }

        i++;
    }

    SYSError(RET_SYSTEM, "组件(%s)的事件(%s)没注册", in_szClass, in_szAction);
    return RC_FAIL;
}

/**************************************************************************************************
    函 数 名：dGetAlgoFee(dbDiscAlgo *pstAlgo, double dTxAmt, long *plFeeType)
    功能描述：计算交易金额对应档费率
    返回说明：
        无
 **************************************************************************************************/
double  CClear::dGetAlgoFee(dbDiscAlgo *pstAlgo, double dTxAmt, long *plFeeType)
{
    double dFee = 0.00, dCalFee = 0.00;

    if (DISC_ALGO_FIXED == pstAlgo->flag)              // 按笔(固定)收费
    {
        *plFeeType = 4;
        dCalFee = pstAlgo->fee_value;
    }
    else if (DISC_ALGO_RATE == pstAlgo->flag)          // 按比收费
    {
        *plFeeType = 1;                              // 1-扣率类
        dFee = dTxAmt * pstAlgo->fee_value / 100;
        if (pstAlgo->min_fee >= dFee)                  // 取最小最大区间的费用
            dFee = pstAlgo->min_fee;
            
        if (pstAlgo->max_fee > 0)
        {
            if (pstAlgo->max_fee <= dFee)
            {
                *plFeeType = 3;                      // 封顶类并达到封顶值
                dFee = pstAlgo->max_fee;             
            }   
            else
            {
                *plFeeType = 2;                      // 固定手续费
            }   
        }   
        dCalFee = dFee;
    }   
    else
    {
        *plFeeType = 0;                              //  其他方式未定，无费率处理
        dCalFee = 0.00;                              
    }   

    return dCalFee;
}

/**************************************************************************************************
    函 数 名：nCalculateFee(char *pszDiscId, TAlgoDtls *pstAlgoDtl)
    功能描述：获取当前交易费率
    返回说明：
        无
 **************************************************************************************************/
long    CClear::nCalculateFee(char *pszDiscId, TAlgoDtls *pstAlgoDtl) 
{
    dbDiscAlgo  stAlgo;

    if(RC_SUCC != lGetDiscAlgo(pszDiscId, pstAlgoDtl->tx_amt, pstAlgoDtl->card_type, &stAlgo))
    {
        SYSError(RET_SYSTEM, "获取费率模型(%s)失败, %s", pszDiscId, sGetError());
        return RC_FAIL;
    }

    pstAlgoDtl->fee_amt = dGetAlgoFee(&stAlgo, pstAlgoDtl->tx_amt, &pstAlgoDtl->fee_type);

    return RC_SUCC;
}

/**************************************************************************************************
    函 数 名：vFillAlgoDtl(TAlgoDtls *pstAlgo)
    功能描述：填充清分数据
    返回说明：
        无
 **************************************************************************************************/
void    CClear::vFillAlgoDtl(TAlgoDtls *pstAlgo)
{
    char    szState[20];

    memset(szState, 0, sizeof(szState));
    IBPgetstring("id", pstAlgo->id, "id");
    IBPgetstring("tx_date", pstAlgo->tx_date, "tx_date");
    IBPgetstring("tx_time", pstAlgo->tx_time, "tx_time");
    IBPgetstring("channel_no", pstAlgo->channel_no, "channel_no");
    IBPgetstring("pay_type", pstAlgo->pay_type, "pay_type");
    IBPgetstring("seq_order", pstAlgo->seq_order, "seq_order");
    IBPgetdouble("tx_amt", &pstAlgo->tx_amt, "tx_amt");
    IBPgetlong("card_type", &pstAlgo->card_type, "card_type");
    IBPgetlong("disc_cycle", &pstAlgo->disc_cycle, "disc_cycle");
    IBPgetstring("app_code", pstAlgo->app_code, "app_code");
    IBPgetstring("mert_no", pstAlgo->mert_no, "mert_no");
    IBPgetstring("mert_nm", pstAlgo->mert_nm, "mert_nm");
    IBPgetstring("brh_code", pstAlgo->brh_code, "brh_code");
    IBPgetstring("product_code", pstAlgo->product_code, "product_code");

    IBPgetdefstring("bank_code", pstAlgo->bank_code, "");
    IBPgetdefstring("bank_card_no", &pstAlgo->bank_card_no, "");
    IBPgetdefstring("user_name", pstAlgo->user_name, "");
    IBPgetdefstring("bank_acc_type", pstAlgo->bank_acc_type, "");
    IBPgetdefstring("bank_full_name", pstAlgo->bank_full_name, "");
    IBPgetdefstring("bank_branch_name", pstAlgo->bank_branch_name, "");
    IBPgetdefstring("bank_areacode", pstAlgo->bank_areacode, "");
    IBPgetdefstring("cnaps_no", pstAlgo->cnaps_no, "");
    IBPgetdefstring("cnaps_bankno", pstAlgo->cnaps_bankno, "");
    IBPgetdefstring("currency", pstAlgo->currency, "CNY");
    IBPgetdefstring("cert_type", pstAlgo->cert_type, "");
    IBPgetdefstring("cert_no", pstAlgo->cert_no, "");
    IBPgetdefstring("mobile_no", pstAlgo->mobile_no, "");
    IBPgetdefstring("order_id", pstAlgo->order_id, "");
    IBPgetdefstring("product_name", pstAlgo->product_name, "");
    IBPgetdefstring("pay_kind", pstAlgo->pay_kind, "");
    IBPgetdefstring("status", szState, "success");

    if(strcmp(szState, "success") || 0 != pstAlgo->disc_cycle)
    {
        SYSError(RET_SYSTEM, "收到非成功(%s)或非S0(%d)的交易", szState, pstAlgo->disc_cycle);
        return ;
    }

    return ;
}

/**************************************************************************************************
    函 数 名：lAlgoSettle(TAlgoDtls *pstAlgo, TMchtFund *pstMcht, TSettleTxn *pstSettle)
    功能描述：
    返回说明：
        RC_SUCC
        RC_FAIL
 **************************************************************************************************/
long    CClear::lAlgoSettle(TAlgoDtls *pstAlgo, TMchtFund *pstMcht, TSettleTxn *pstSettle)
{
    dbMchtAcct  stAcct;
    dbMchtBase  stBase;
    dbMchtProd  stProd;

    if(RC_SUCC != lGetMchtBase(&stBase, pstAlgo->mert_no))
    {
        SYSError(RET_SYSTEM, "获取商户(%s)信息失败, err:(%s)", pstAlgo->mert_no, sGetError());
        return RC_FAIL;
    }

    if(strcmp(stBase.mcht_status, "ZC"))
    {
        SYSError(RET_SYSTEM, "商户(%s)状态(%s)异常, err:(%s)", pstAlgo->mert_no, 
            stBase.mcht_status, sGetError());
        return RC_FAIL;
    }

    //    获取商户产品费率
    if(RC_SUCC != lGetMchtPord(&stProd, pstAlgo->mert_no, pstAlgo->product_code))
    {
        SYSError(RET_SYSTEM, "获取商户(%s)(%s)信息失败, err:(%s)", pstAlgo->mert_no, 
            pstAlgo->product_code, sGetError());
        return RC_FAIL;
    }

    pstAlgo->brh_flag[0]  = ALGO_BRH_FLAG_NULL;
    pstAlgo->mcht_flag[0] = ALGO_MCHT_FLAG_SUCC;
    memcpy(pstAlgo->disc_id, stProd.base_disc, sizeof(pstAlgo->disc_id));

    if(RC_SUCC != nCalculateFee(stProd.base_disc, pstAlgo))
    {
        SYSError(RET_SYSTEM, "记录商户(%s)(%s)手续费失败, err:(%s)", pstAlgo->mert_no, 
            pstAlgo->disc_id, sGetError());
        return RC_FAIL;
    }
    
    memcpy(pstAlgo->algo_date, sGetTxDate(), sizeof(pstAlgo->algo_date) - 1);
    memcpy(pstAlgo->settle_num, BATCH_REAL_SETTLE, sizeof(pstAlgo->settle_num) - 1);
    memcpy(pstAlgo->stlm_date, pstAlgo->algo_date, sizeof(pstAlgo->stlm_date) - 1);
    memcpy(pstAlgo->create_time, sGetCurrentTime(), sizeof(pstAlgo->create_time) - 1 );

    pstMcht->tx_num = 1; 
    pstMcht->tx_amt = pstAlgo->tx_amt; 
    pstMcht->fee_amt = pstAlgo->fee_amt;
    pstMcht->settle_amt = pstMcht->tx_amt - pstMcht->fee_amt;
    memcpy(pstMcht->channel_no, pstAlgo->channel_no, sizeof(pstMcht->channel_no) - 1);
    memcpy(pstMcht->mert_no, pstAlgo->mert_no, sizeof(pstMcht->mert_no) - 1);
    memcpy(pstMcht->mert_nm, pstAlgo->mert_nm, sizeof(pstMcht->mert_nm) - 1);
    memcpy(pstMcht->tx_date, pstAlgo->tx_date, sizeof(pstMcht->tx_date) - 1);
    memcpy(pstMcht->settle_num, pstAlgo->settle_num, sizeof(pstMcht->settle_num) - 1);
    memcpy(pstMcht->settle_date, pstAlgo->algo_date, sizeof(pstMcht->settle_date) - 1);
    snprintf(pstMcht->id, sizeof(pstMcht->id), "%4s%s", pstMcht->channel_no, pstAlgo->id);
    snprintf(pstMcht->trace_no, sizeof(pstMcht->trace_no), "%7s%4s%08d", 
        pstMcht->settle_date + 1, pstMcht->channel_no, lGetSeqNo());
    memcpy(pstMcht->create_time, pstAlgo->create_time, sizeof(pstMcht->create_time));

    //    只有2中情况不需要往下执行  1、商户资金汇总为0、清算流水直接进入账失败表中
    if(fabs(pstMcht->settle_amt) < 0.0005)
    {
        pstMcht->dc_flag[0] = 'C';
        pstMcht->result_flag[0] = SETTLE_MCHT_SUCC;
        return RC_SUCC;
    }

    pstMcht->dc_flag[0] = 'D';
    pstMcht->result_flag[0] = SETTLE_MCHT_PUTREQ;    //    直接请求中

    pstSettle->settle_amt = pstMcht->settle_amt;
    memcpy(pstSettle->currency, "CNY", sizeof(pstSettle->currency));
    memcpy(pstSettle->settle_date, pstAlgo->algo_date, sizeof(pstMcht->settle_date));
    snprintf(pstSettle->id, sizeof(pstSettle->id), "%s%s%010d", pstMcht->channel_no, 
		sGetTxDate(), lGetSeqNo());
    snprintf(pstSettle->trace_no, sizeof(pstSettle->trace_no), "%s%012d", 
        pstSettle->settle_date + 1, lGetSeqNo());
    memcpy(pstSettle->pay_order, pstMcht->id, sizeof(pstSettle->pay_order) - 1);
    memcpy(pstSettle->tx_date, pstMcht->tx_date, sizeof(pstSettle->tx_date) - 1);
    memcpy(pstSettle->settle_num, pstMcht->settle_num, sizeof(pstSettle->settle_num) - 1);
    memcpy(pstSettle->channel_no, pstMcht->channel_no, sizeof(pstSettle->channel_no) - 1);
    memcpy(pstSettle->mert_no, pstMcht->mert_no, sizeof(pstSettle->mert_no) - 1);
    memcpy(pstSettle->mert_nm, pstMcht->mert_nm, sizeof(pstSettle->mert_nm) - 1);
    memcpy(pstSettle->pay_acct, sGetDbsEnv(pstSettle->channel_no), sizeof(pstSettle->pay_acct) - 1);

    if(RC_SUCC != lGetMchtAcct(&stAcct, pstSettle->mert_no))
    {
        SYSError(RET_SYSTEM, "获取商户(%s)账户信息失败, (%s)", pstSettle->mert_no, sGetError());
        return RC_FAIL;
    }

    pstSettle->result_flag[0] = SETTLE_IN_FLAG_PREQ;
    memcpy(pstSettle->acct_no, stAcct.acct_no, sizeof(pstSettle->acct_no) - 1);
    memcpy(pstSettle->acct_nm, stAcct.acct_nm, sizeof(pstSettle->acct_nm) - 1);
    memcpy(pstSettle->acct_type, stAcct.acct_type, sizeof(pstSettle->acct_type) - 1);
    memcpy(pstSettle->acct_bank_no, stAcct.acct_bank_no, sizeof(pstSettle->acct_bank_no) - 1);
    memcpy(pstSettle->acct_bank_nm, stAcct.acct_bank_nm, sizeof(pstSettle->acct_bank_nm) - 1);
    memcpy(pstSettle->acct_zbank_no, stAcct.acct_zbank_no, sizeof(pstSettle->acct_zbank_no) - 1);
    memcpy(pstSettle->acct_zbank_nm, stAcct.acct_zbank_nm, sizeof(pstSettle->acct_zbank_nm) - 1);
    memcpy(pstSettle->acct_zbank_addr, stAcct.acct_zbank_addr, sizeof(pstSettle->acct_zbank_addr) - 1);
    memcpy(pstSettle->acct_zbank_code, stAcct.acct_zbank_code, sizeof(pstSettle->acct_zbank_code) - 1);
    memcpy(pstSettle->acct_net_no, stAcct.acct_net_no, sizeof(pstSettle->acct_net_no) - 1);
    memcpy(pstSettle->acct_union_no, stAcct.acct_union_no, sizeof(pstSettle->acct_union_no) - 1);
    memcpy(pstSettle->cert_type, stAcct.cert_type, sizeof(pstSettle->cert_type) - 1);
    memcpy(pstSettle->cert_no, stAcct.cert_no, sizeof(pstSettle->cert_no) - 1);
    memcpy(pstSettle->resv_phone, stAcct.resv_phone, sizeof(pstSettle->resv_phone) - 1);
    memcpy(pstSettle->create_time, pstAlgo->create_time, sizeof(pstSettle->create_time) - 1);

// 帐号检查，如果异常，新增记录到入账失败表中
// stSettle.result_flag[0] = SETTLE_IN_FLAG_FAIL;


    return RC_SUCC;
}

/**************************************************************************************************
    函 数 名：vGenSettleTxn()
    功能描述：
    返回说明：
        无
 **************************************************************************************************/
void    CClear::vGenSettleTxn()
{
    EXEC SQL BEGIN DECLARE SECTION;
    TAlgoDtls  stAlgo;
    TMchtFund  stMcht;
    TSettleTxn stSettle;
    EXEC SQL END DECLARE SECTION;

    memset(&stAlgo, 0, sizeof(TAlgoDtls));
    memset(&stMcht, 0, sizeof(TMchtFund));
    memset(&stSettle, 0, sizeof(TSettleTxn));
    IBPputstring("TR_RETCODE", "s0-010"); 
    vFillAlgoDtl(&stAlgo);
    if(IBPIserr())    return;

    IBPrace("开始处理(%s)商户(%s)交易金额(%.2f)清分", stAlgo.id, stAlgo.mert_no, stAlgo.tx_amt);
    if(RC_SUCC != lAlgoSettle(&stAlgo, &stMcht, &stSettle))
        goto SettleError;
    
    EXEC SQL INSERT INTO TBL_ALGO_DTLS VALUES (:stAlgo);
    if(SQLCODE)
    {
        SYSError(RET_DATABASE, "新增清分记录(%s)失败, %s", stAlgo.id, sDbsError());
        goto SettleError;
    }

    EXEC SQL INSERT INTO TBL_MCHT_FUND VALUES (:stMcht);
    if(SQLCODE)
    {
        SYSError(RET_DATABASE, "汇总商户资金(%s)失败, %s", stMcht.id, sDbsError());
        goto SettleError;
    }

    if(SETTLE_MCHT_SUCC == stMcht.result_flag[0])
        return ;

    EXEC SQL INSERT INTO TBL_SETTLE_TXN VALUES (:stSettle);
    if(SQLCODE)
    {
        SYSError(RET_DATABASE, "生成代付清算流水(%s)失败, %s", stSettle.id, sDbsError());
        goto SettleError;
    }

    if(SETTLE_IN_FLAG_FAIL == stSettle.result_flag[0])
        return ;

    IBPputstring("TR_RETCODE", "s0-000"); 
    vPutSettleTxn(&stSettle);
    lSettleMonIns(&stSettle);
    IBPputstring("s0_flow", "1");
    return ;

SettleError:
    EXEC SQL ROLLBACK WORK;
    nInsertError(&stAlgo);    
    return ;
}

/**************************************************************************************************
    函 数 名：vPutSettleTxn(TSettleTxn *pstSettleTxn)
    功能描述：将结算信息压入变量池
    返回说明：
        无
**************************************************************************************************/
void    CClear::vPutSettleTxn(TSettleTxn *pstSettle)
{
    vResetUser();
    IBPputlong("loop", 1);
    IBPputstring("id", pstSettle->id);
    IBPputsenstr("acct_no", pstSettle->acct_no, FILED_SENNAM);
    IBPputsenstr("acct_nm", pstSettle->acct_nm, FILED_SENACT);
    IBPputsenstr("cert_no", pstSettle->cert_no, FILED_SENACT);
    IBPputstring("pay_acct", pstSettle->pay_acct);
    IBPputstring("cert_type", pstSettle->cert_type);
    if('0' == pstSettle->acct_type[0])
        pstSettle->acct_type[0] = '1';
    else
        pstSettle->acct_type[0] = '2';
    IBPputstring("acct_type", pstSettle->acct_type);
    IBPputdouble("settle_amt", pstSettle->settle_amt);
    IBPputstring("acct_net_no", pstSettle->acct_net_no);
    IBPputstring("acct_union_no", pstSettle->acct_union_no);
    IBPputstring("acct_bank_no", pstSettle->acct_bank_no);
    IBPputstring("acct_bank_nm", pstSettle->acct_bank_nm);
    IBPputstring("acct_zbank_no", pstSettle->acct_zbank_no);
    IBPputstring("acct_zbank_nm", pstSettle->acct_zbank_nm);
    IBPputstring("acct_zbank_addr", pstSettle->acct_zbank_addr);
    IBPputstring("acct_zbank_code", pstSettle->acct_zbank_code);
}

/**************************************************************************************************
    函 数 名：lSettleMonIns(TSettleTxn *pstSettle)
    功能描述：写TBL_SETTLE_MON表
    返回说明：
        RC_SUCC      --成功
        RC_FAIL      --失败
 **************************************************************************************************/
long    CClear::lSettleMonIns(TSettleTxn *pstSettle)
{
    EXEC SQL BEGIN DECLARE SECTION;
    TSettleMon  stMon;
    EXEC SQL END DECLARE SECTION;

    memset(&stMon, 0, sizeof(TSettleMon));

    stMon.que_cnt = 5;
    stMon.result_flag[0] = SETTLE_IN_FLAG_PREQ;
    memcpy(stMon.id, pstSettle->id, sizeof(stMon.id));
    memcpy(stMon.mark, pstSettle->pay_acct, sizeof(stMon.mark));
    memcpy(stMon.rec_crt_ts, pstSettle->create_time, sizeof(stMon.rec_crt_ts));
    memcpy(stMon.rec_upd_ts, pstSettle->create_time, sizeof(stMon.rec_upd_ts));
    memcpy(stMon.settle_date, pstSettle->settle_date, sizeof(stMon.settle_date));

    EXEC SQL INSERT INTO TBL_SETTLE_MON(ID, SETTLE_DATE, QUE_CNT, RESULT_FLAG, MARK, RESV,
        REC_CRT_TS) VALUES(:stMon.id, :stMon.settle_date, :stMon.que_cnt, :stMon.result_flag, 
        :stMon.mark, :stMon.resv, :stMon.rec_crt_ts);
    if (SQLCODE)
    {
        SYSError(RET_DATABASE, "新增监控流水(%s)失败, err:(%d)(%s)", stMon.id,
            SQLCODE, sDbsError());
        return RC_FAIL;
    }

    return RC_SUCC;
}

/**************************************************************************************************
    函 数 名：nInsertError(TAlgoDtls *pstAlgo)
    功能描述：写TBL_STLM_ERR表数据
    返回说明：
        RC_SUCC      --成功
        RC_FAIL      --失败
**************************************************************************************************/
long    CClear::nInsertError(TAlgoDtls *pstAlgo)
{
    EXEC SQL BEGIN DECLARE SECTION;
    long        lRec;
    TOrderErr   stErr;
    EXEC SQL END DECLARE SECTION;

    memset(&stErr, 0, sizeof(TOrderErr));
    stErr.tx_amt         = stErr.local_amt;
    stErr.local_amt      = pstAlgo->tx_amt;
    stErr.card_type      = pstAlgo->card_type;
    stErr.disc_cycle     = pstAlgo->disc_cycle;
    stErr.err_type[0]    = ERR_CUP_MCHT_UNUSUAL;
    stErr.stlm_type[0]   = ERR_CUP_NOT_CHECK;
    stErr.result_flag[0] = STLM_CUP_NOT_DEAL;
    memcpy(stErr.id, pstAlgo->id, sizeof(stErr.id) - 1);
    memcpy(stErr.tx_date, pstAlgo->tx_date, 8);
    memcpy(stErr.tx_time, pstAlgo->tx_time, 6);
    memcpy(stErr.channel_no, pstAlgo->channel_no, sizeof(stErr.channel_no) - 1);
    memcpy(stErr.pay_type, pstAlgo->pay_type, sizeof(stErr.pay_type) - 1);
    memcpy(stErr.seq_order, pstAlgo->seq_order, sizeof(stErr.seq_order) - 1);
    memcpy(stErr.bank_code, pstAlgo->bank_code, sizeof(stErr.bank_code) - 1);
    memcpy(stErr.bank_card_no, pstAlgo->bank_card_no, sizeof(stErr.bank_card_no) - 1);
    memcpy(stErr.user_name, pstAlgo->user_name, sizeof(stErr.user_name) - 1);
    memcpy(stErr.bank_acc_type, pstAlgo->bank_acc_type, sizeof(stErr.bank_acc_type) - 1);
    memcpy(stErr.bank_full_name, pstAlgo->bank_full_name, sizeof(stErr.bank_full_name) - 1);
    memcpy(stErr.bank_branch_name, pstAlgo->bank_branch_name, sizeof(stErr.bank_branch_name) - 1);
    memcpy(stErr.bank_areacode, pstAlgo->bank_areacode, sizeof(stErr.bank_areacode) - 1);
    memcpy(stErr.cnaps_no, pstAlgo->cnaps_no, sizeof(stErr.cnaps_no) - 1);
    memcpy(stErr.cnaps_bankno, pstAlgo->cnaps_bankno, sizeof(stErr.cnaps_bankno) - 1);
    memcpy(stErr.currency, pstAlgo->currency, sizeof(stErr.currency) - 1);
    memcpy(stErr.remark, pstAlgo->remark, sizeof(stErr.remark) - 1);
    memcpy(stErr.app_code, pstAlgo->app_code, sizeof(stErr.app_code) - 1);
    memcpy(stErr.mert_no, pstAlgo->mert_no, sizeof(stErr.mert_no) - 1);
    memcpy(stErr.mert_nm, pstAlgo->mert_nm, sizeof(stErr.mert_nm) - 1);
    memcpy(stErr.brh_code, pstAlgo->brh_code, sizeof(stErr.brh_code) - 1);
    memcpy(stErr.cert_type, pstAlgo->cert_type, sizeof(stErr.cert_type) - 1);
    memcpy(stErr.cert_no, pstAlgo->cert_no, sizeof(stErr.cert_no) - 1);
    memcpy(stErr.mobile_no, pstAlgo->mobile_no, sizeof(stErr.mobile_no) - 1);
    memcpy(stErr.order_id, pstAlgo->order_id, sizeof(stErr.order_id) - 1);
    memcpy(stErr.product_code, pstAlgo->product_code, sizeof(stErr.product_code) - 1);
    memcpy(stErr.product_name, pstAlgo->product_name, sizeof(stErr.product_name) - 1);
    memcpy(stErr.pay_kind, pstAlgo->pay_kind, sizeof(stErr.pay_kind) - 1);
    memcpy(stErr.err_desc, "商户信息异常", sizeof(stErr.err_desc) - 1);
    memcpy(stErr.settle_num, BATCH_REAL_SETTLE, 4);
    memcpy(stErr.create_time, sGetCurrentTime(), 14);
    IBPgetdefstring("status", stErr.status, "");

    EXEC SQL SELECT COUNT(*) INTO :lRec FROM TBL_ALGO_DTL WHERE ID = :stErr.id;
    if(lRec > 0)
    {
        IBPputstring("TR_RETCODE", "s0-001");    //  返回给POSP为登记成功
        SYSError(RET_DATABASE, "流水(%s)已清分, 无法登记", stErr.id);
        return RC_FAIL;
    }

    EXEC SQL INSERT INTO TBL_ORDER_ERR VALUES (:stErr);
    if (SQLCODE)
    {
        if(-1 == SQLCODE)
            IBPputstring("TR_RETCODE", "s0-001");    //  返回给POSP为登记成功
        SYSError(RET_DATABASE, "新增差错明细(%s)失败, (%s)", stErr.id, sDbsError());
        return RC_FAIL;
    }
    EXEC SQL COMMIT WORK;

    IBPputstring("TR_RETCODE", "s0-000");    //  返回给POSP为登记成功
    return RC_SUCC;
}

/**************************************************************************************************
    函 数 名：vChkSettleTxn()
    功能描述：
    返回说明：
        无
**************************************************************************************************/
void    CClear::vChkSettleTxn()
{
    EXEC SQL BEGIN DECLARE SECTION;
    long    lCount = 0;
    char    szIdx[30];
    EXEC SQL END DECLARE SECTION;

    memset(szIdx, 0, sizeof(szIdx));
    IBPgetstring("id", szIdx, "id主键");
    if(IBPIserr())
        return ;

    EXEC SQL SELECT COUNT(*) INTO :lCount FROM (
        SELECT A.ID FROM TBL_ALGO_DTL A WHERE A.ID = :szIdx
        UNION
        SELECT E.ID FROM TBL_STLM_ERR E WHERE E.ID = :szIdx);
    if(SQLCODE)
    {
        SYSError(RET_DATABASE, "查询清分表(%s)记录失败, err:(%d)(%s)",
            szIdx, SQLCODE, sDbsError());
        return ;
    }

    if(1 != lCount)
    {
        SYSError(RET_DATABASE, "无此(%s)流水", szIdx);
        return ;
    }

    return ;
}

/*************************************************************************************************
    code end
**************************************************************************************************/

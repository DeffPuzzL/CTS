/**************************************************************************************************
    文 件 名：demo.pc
    代码作者：DeffPuzzL
    编写版本：
    创建日期：2016-07-14
    功能描述：demo实现业务模块
 **************************************************************************************************/
#include    "count_fund.h"
#include    "algo.h"

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
#include    "tbl_mcht_fund.h"
#include    "tbl_settle_err.h"
EXEC SQL END DECLARE SECTION;

/**************************************************************************************************
    方法定义
 **************************************************************************************************/
CFund::stEvent CFund::m_stEvent[] =
{
    {"count",               &CFund::vCountMchtFund },
    {"error",               &CFund::vCountErrFound },
    { "", NULL }
};

/**************************************************************************************************
    函 数 名：CFund()
    功能描述：构造函数
    返回说明：
 **************************************************************************************************/
CFund::CFund()
{

}

/**************************************************************************************************
    函 数 名：~CFund()
    功能描述：析构函数
    返回说明：
 **************************************************************************************************/
CFund::~CFund()
{


}

/**************************************************************************************************
    函 数 名：lRunObject(char* in_szClass, char* in_szAction)
    功能描述：运行类中的方法
    返回说明：
        RC_SUCC         --成功
        RC_FAIL         --失败
 **************************************************************************************************/
long    CFund::lRunObject(char *in_szClass, char *in_szAction)
{
    int     i = 0;
    char    *p, szAction[256];

    memset(szAction, 0, sizeof(szAction));

    if ((p = strstr(in_szAction, "__")) != NULL)
    {
        strncpy(szAction, in_szAction, p - in_szAction);
    }
    else
    {
        strcpy(szAction, in_szAction);
    }

    while (0 != strcmp(m_stEvent[i].m_szName, ""))
    {
        if (0 == strcmp(m_stEvent[i].m_szName, szAction))
        {
            (this->*m_stEvent[i].m_pEvent)();
            return RC_SUCC;
        }

        i++;
    }

    SYSError(RET_SYSTEM, "组件(%s)的事件(%s)没注册", in_szClass, in_szAction);
    return RC_FAIL;
}

/**************************************************************************************************
    函 数 名：vCountMchtFund()
    功能描述：统计本周期商户资金
    返回说明：
        无
 **************************************************************************************************/
void    CFund::vCountMchtFund()
{
    EXEC SQL BEGIN DECLARE SECTION;
    TMchtFund   stFund;
    char        szDate[9], szNum[5], szFlag[2], szSucc[2];
    EXEC SQL END DECLARE SECTION;
    long        lCount = 0, lSeqNo = 0;
    GCts        *pstCts = (GCts *)pGetGloble();

    memset(szNum, 0, sizeof(szNum));
    memset(szDate, 0, sizeof(szDate));
    memset(szFlag, 0, sizeof(szFlag));
    memset(szSucc, 0, sizeof(szSucc));
    IBPgetstring("BAT_NUM", szNum, "批次编号");
    IBPgetstring("BAT_DATE", szDate, "清算日期");
//  IBPgetstring("BAT_CUPSNO", szCups, "批次编号");
    if(IBPIserr())
        return ;

    szFlag[0] = ALGO_MCHT_FLAG_INIT;
    szSucc[0] = ALGO_MCHT_FLAG_SUCC;
    EXEC SQL DECLARE Cur_algo_dtls CURSOR FOR 
        SELECT COUNT(*), SUM(TX_AMT), SUM(FEE_AMT), CHANNEL_NO, MERT_NO, MAX(MERT_NM),
            MAX(TX_DATE) FROM TBL_ALGO_DTLS 
        WHERE ALGO_DATE = :szDate AND MCHT_FLAG = :szFlag AND DISC_CYCLE > 0
            GROUP BY CHANNEL_NO, MERT_NO;

    EXEC SQL OPEN Cur_algo_dtls;
    if(SQLCODE)
    {
        SYSError(RET_DATABASE, "打开游标失败, err:(%d)(%s)", SQLCODE, sDbsError());
        return ;
    }

    lSeqNo = pstCts->m_lSeqNo;
    while (1)
    {
        memset(&stFund, 0, sizeof(TMchtFund));
        EXEC SQL FETCH Cur_algo_dtls INTO :stFund.tx_num, :stFund.tx_amt, :stFund.fee_amt, 
            :stFund.channel_no, :stFund.mert_no, :stFund.mert_nm, :stFund.tx_date;
        if(SQLERR)
        {
            SYSError(RET_DATABASE, "汇总商户资金失败, err:(%d)(%s)", SQLCODE, sDbsError());
            break;
        }
        if(SQLNOTFOUND)
            break;

        ++ lCount;
        stFund.settle_amt = stFund.tx_amt - stFund.fee_amt;
        strncpy(stFund.settle_num, szNum, sizeof(stFund.settle_num) - 1);
        strncpy(stFund.settle_date, szDate, sizeof(stFund.settle_date) - 1);

        snprintf(stFund.id, sizeof(stFund.id), "%4s%7s%09d", stFund.channel_no, 
            stFund.settle_date + 1, lSeqNo ++);
        snprintf(stFund.trace_no, sizeof(stFund.trace_no), "%7s%4s%08d", stFund.settle_date + 1, 
            stFund.channel_no, lSeqNo);
        strncpy(stFund.create_time, sGetCurrentTime(), sizeof(stFund.create_time) - 1);

        if (fabs(stFund.settle_amt) < 0.0005)
        {
            stFund.dc_flag[0] = 'C';
            stFund.result_flag[0] = SETTLE_MCHT_SUCC;
        }
        else
        {
            stFund.dc_flag[0] = 'D';
            stFund.result_flag[0] = SETTLE_MCHT_NOTDEAL;
        }

        EXEC SQL INSERT INTO TBL_MCHT_FUND VALUES (:stFund);
        if (SQLCODE)
        {
            SYSError(RET_DATABASE, "新增(%s)商户(%s)代发数据失败, err:(%d)(%s)", stFund.id, 
                stFund.mert_no, SQLCODE, sDbsError());
            break;
        }

        EXEC SQL UPDATE TBL_ALGO_DTLS SET
            MCHT_FLAG    = :szSucc,
            MCHT_TRACE_NO= :stFund.trace_no,
            UPDATE_TIME  = :stFund.create_time
        WHERE ALGO_DATE  = :szDate AND MCHT_FLAG = :szFlag AND DISC_CYCLE > 0
            AND MERT_NO  = :stFund.mert_no;
        if(SQLCODE)
        {
            SYSError(RET_DATABASE, "更新商户(%s)清分明细状态失败, err:(%d)(%s)", stFund.mert_no, 
                SQLCODE, sDbsError());
            break;
        }
    
        if (++ lCount % 1000 == 0)
            EXEC SQL COMMIT WORK;
    }
    EXEC SQL CLOSE Cur_algo_dtls;

    IBPrace("开始汇总日期(%s)商户清算流水批次(%s), 记录(%d)", szDate, szNum, lCount);

    return ;
}

/**************************************************************************************************
    函 数 名：vCountErrFound()
    功能描述：统计本周期商户资金
    返回说明：
        无
 **************************************************************************************************/
void    CFund::vCountErrFound()
{
    EXEC SQL BEGIN DECLARE SECTION;
    TMchtFund   stFund;
    TSettleErr  stError;
    char        szDate[9], szNum[5];
    char        szDone[2], szErr[2], szInit[2], szSucc[2];
    EXEC SQL END DECLARE SECTION;
    long        lCount = 0, lSeqNo = 0;
    GCts        *pstCts = (GCts *)pGetGloble();

    memset(szNum, 0, sizeof(szNum));
    memset(szDate, 0, sizeof(szDate));
    memset(szInit, 0, sizeof(szInit));
    memset(szSucc, 0, sizeof(szSucc));
    memset(szErr, 0, sizeof(szErr));
    memset(szDone, 0, sizeof(szDone));
    IBPgetstring("BAT_NUM", szNum, "批次编号");
    IBPgetstring("BAT_DATE", szDate, "清算日期");
    if(IBPIserr())
        return ;

    szErr[0] = SETTLE_ERR_FAILED;
    szDone[0] = SETTLE_ERR_TO_DONE;
    szInit[0] = SETTLE_MCHT_NOTDEAL;
    szSucc[0] = SETTLE_MCHT_SUCC;

    EXEC SQL UPDATE TBL_SETTLE_ERR
       SET ID = ID
     WHERE DO_FLAG = :szDone AND ERR_TYPE = :szErr;
    if(SQL_UD_ERR)
    {
        SYSError(RET_DATABASE, "锁定入账差错记录失败, err:(%d)(%s)", SQLCODE, sDbsError());
        return ;
    }

    EXEC SQL DECLARE Cur_settle_err CURSOR FOR
        SELECT * FROM TBL_SETTLE_ERR
     WHERE DO_FLAG = :szDone AND ERR_TYPE = :szErr;

    EXEC SQL OPEN Cur_settle_err;
    if (SQLCODE)
    {
        SYSError(RET_DATABASE, "定义打开游标失败, err:(%d)(%s)", SQLCODE, sDbsError());
        return ;
    }

    lSeqNo = pstCts->m_lSeqNo;
    while (1)
    {
        memset(&stError, 0, sizeof(TSettleErr));
        memset(&stFund, 0, sizeof(TMchtFund));
        EXEC SQL FETCH Cur_settle_err INTO :stError;
        if(SQLERR)
        {
            SYSError(RET_DATABASE, "查询入账失败流水失败, err:(%d)(%s)", SQLCODE, sDbsError());
            EXEC SQL CLOSE Cur_settle_err;
            return ;
        }
        else if (SQLNOTFOUND)
            break;

        stError.do_flag[0] = SETTLE_ERR_SETTLE_SUCC;
        snprintf(stError.next_date, sizeof(stError.next_date), "%s", szDate);
        snprintf(stError.next_num, sizeof(stError.settle_num), "%s", szNum);
        snprintf(stError.update_time, sizeof(stError.update_time), "%s", sGetCurrentTime());

        EXEC SQL SELECT * INTO :stFund FROM TBL_MCHT_FUND
             WHERE MERT_NO = :stError.mert_no AND SETTLE_DATE = :szDate
        AND (result_flag = :szInit OR (DC_FLAG = :szSucc AND RESULT_FLAG = :szSucc));
        if(SQLERR)
        {
            SYSError(RET_DATABASE, "查询商户(%s)代发明细失败, err:(%d)(%s)", stError.mert_no, 
                SQLCODE, sDbsError());
            return ;
        }

        ++ lCount;
        stFund.uperr_amt += stError.settle_amt;
        stFund.settle_amt += stError.settle_amt;

         if (fabs(stFund.settle_amt) < 0.0005)
        {
            stFund.dc_flag[0] = 'C';
            stFund.result_flag[0] = SETTLE_MCHT_SUCC;
          }
        else
        {
            stFund.dc_flag[0] = 'D';
            stFund.result_flag[0] = SETTLE_MCHT_NOTDEAL;
        }

        if(SQLNOTFOUND)
        {
            strncpy(stFund.tx_date, szDate, sizeof(stFund.tx_date));
            strncpy(stFund.settle_date, szDate, sizeof(stFund.settle_date));
            strncpy(stFund.settle_num, szNum, sizeof(stFund.settle_num));
            strncpy(stFund.channel_no, stError.channel_no, sizeof(stFund.channel_no));
            strncpy(stFund.mert_no, stError.mert_no, sizeof(stFund.mert_no));
            strncpy(stFund.mert_nm, stError.mert_nm, sizeof(stFund.mert_nm));
            strncpy(stFund.create_time, stError.update_time, sizeof(stFund.create_time));
            
            snprintf(stFund.id, sizeof(stFund.id), "%4s%7s%09d", stFund.channel_no, 
                stFund.settle_date + 1, lSeqNo);
            snprintf(stFund.trace_no, sizeof(stFund.trace_no), "%7s%4s%08d", stFund.settle_date + 1, 
                stFund.channel_no, lSeqNo);
            ++ lSeqNo;

            EXEC SQL INSERT INTO TBL_MCHT_FUND VALUES (:stFund);
        }
        else
        {
            EXEC SQL UPDATE TBL_MCHT_FUND SET 
                RESULT_FLAG  = :stFund.result_flag,
                   UPERR_AMT    = :stFund.uperr_amt,
                   SETTLE_AMT   = :stFund.settle_amt,
                   DC_FLAG      = :stFund.dc_flag,
                   UPDATE_TIME  = :stError.update_time
             WHERE ID = :stFund.id;
        }
        if(SQLCODE)
        {
            SYSError(RET_DATABASE, "操作(%s)商户(%s)结算资金表失败, err:(%d)(%s)", stFund.id, 
                stFund.mert_no, SQLCODE, sDbsError());
            EXEC SQL CLOSE Cur_settle_err;
            return ;
        }

        EXEC SQL UPDATE TBL_SETTLE_ERR SET 
            DO_FLAG    = :stError.do_flag,
            NEXT_DATE  = :stError.next_date,
            NEXT_NUM   = :stError.next_num,
            NEXT_CUP   = :stFund.channel_no,
            UPDATE_TIME= :stError.update_time
         WHERE ID = :stError.id;
        if (SQLCODE)
        {
            SYSError(RET_DATABASE, "更新入账失败流水(%s)状态失败, err:(%d)(%s)", stError.id, 
                SQLCODE, sDbsError());
            EXEC SQL CLOSE Cur_settle_err;
            return ;
        }
    }
    EXEC SQL CLOSE Cur_settle_err;
    EXEC SQL COMMIT WORK;

    IBPrace("汇总日期(%s)(%s)商户重新入账笔数(%d)", szDate, szNum, lCount);

    return ;
}

/*************************************************************************************************
    code end
**************************************************************************************************/

/*
 *  Copyright 2006, Shanghai Huateng Software Systems Co., Ltd.
 *  All right reserved.
 *
 *  THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF SHANGHAI HUATENG
 *  SOFTWARE SYSTEMS CO., LTD.  THE CONTENTS OF THIS FILE MAY NOT
 *  BE DISCLOSED TO THIRD PARTIES, COPIED OR DUPLICATED IN ANY FORM,
 *  IN WHOLE OR IN PART, WITHOUT THE PRIOR WRITTEN PERMISSION OF
 *  SHANGHAI HUATENG SOFTWARE SYSTEMS CO., LTD.
 *
 *  $Id$
 *
 *  function: table tbl_r_special_mcht operator function
 *
 *  Edit History:
 *
 *    2017/08/15 09:18:27 by gendb
 */
 
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "dbs/dbsdef.h"
EXEC SQL include sqlca;
EXEC SQL include sqlda;


EXEC SQL BEGIN DECLARE SECTION;
struct TBL_R_SPECIAL_MCHT_Def {
    int        id;    /* 自增ID */
    char       status[2];    /* 状态 */
    char       local_mcht_no[21];    /* 本地商户号 */
    char       local_mcht_nm[257];    /* 本地商户名 */
    char       channel_nm[257];    /* 通道号 */
    char       channel_mcht_no[26];    /* 通道商户号 */
    char       channel_mcht_nm[257];    /* 通道商户名 */
    double     rate;    /* 费率 */
    double     max_fee;    /* 最大金额 */
    double     min_fee;    /* 最小金额 */
    char       scan_mode[2];    /* 扫描码 */
    char       credit_supp[2];    /* 信用卡 */
    char       region_code[7];    /* 地区号 */
    double     max_total_amout;    /* 最大额度 */
    char       resv[257];    /* 备用 */
    char       remark[1025];    /* 备注 */
    char       create_tm[15];    /* 创建时间 */
    int        create_id;    /* 创建人 */
    char       lupd_tm[15];    /* 最后修改时间 */
    int        lupd_id;    /* 修改人 */
    int        priority;    /* 优先级 */
} ltTBL_R_SPECIAL_MCHT;
short s_ind;
char  s_count[33];
EXEC SQL END DECLARE SECTION;
/*************************************************************************/
/*    input : DBS_FUNC   the dbs func                                    */
/*            The struct pointer defined in upper.                       */
/*    return : the sqlca.sqlcode                                         */
/*************************************************************************/
int DbsTBL_R_SPECIAL_MCHT(int ifunc, struct TBL_R_SPECIAL_MCHT_Def *pTBL_R_SPECIAL_MCHT)
{
    memcpy(&ltTBL_R_SPECIAL_MCHT, pTBL_R_SPECIAL_MCHT, sizeof(ltTBL_R_SPECIAL_MCHT));

    switch (ifunc) {
    case DBS_UPDATE1 :
        EXEC SQL UPDATE
            tbl_r_special_mcht
        SET
            CHANNEL_MCHT_NO         = :ltTBL_R_SPECIAL_MCHT.channel_mcht_no ,
            LUPD_TM                 = :ltTBL_R_SPECIAL_MCHT.lupd_tm ,
            PRIORITY                = :ltTBL_R_SPECIAL_MCHT.priority
        WHERE
            LOCAL_MCHT_NO = :ltTBL_R_SPECIAL_MCHT.local_mcht_no AND
            CHANNEL_NM = :ltTBL_R_SPECIAL_MCHT.channel_nm;

        break;

    case DBS_INSERT :
        EXEC SQL INSERT INTO tbl_r_special_mcht (
            ID ,
            STATUS ,
            LOCAL_MCHT_NO ,
            LOCAL_MCHT_NM ,
            CHANNEL_NM ,
            CHANNEL_MCHT_NO ,
            CHANNEL_MCHT_NM ,
            RATE ,
            MAX_FEE ,
            MIN_FEE ,
            SCAN_MODE ,
            CREDIT_SUPP ,
            REGION_CODE ,
            MAX_TOTAL_AMOUT ,
            RESV ,
            REMARK ,
            CREATE_TM ,
            CREATE_ID ,
            LUPD_TM ,
            LUPD_ID ,
            PRIORITY
        ) VALUES (
            :ltTBL_R_SPECIAL_MCHT.id ,
            :ltTBL_R_SPECIAL_MCHT.status ,
            :ltTBL_R_SPECIAL_MCHT.local_mcht_no ,
            :ltTBL_R_SPECIAL_MCHT.local_mcht_nm ,
            :ltTBL_R_SPECIAL_MCHT.channel_nm ,
            :ltTBL_R_SPECIAL_MCHT.channel_mcht_no ,
            :ltTBL_R_SPECIAL_MCHT.channel_mcht_nm ,
            :ltTBL_R_SPECIAL_MCHT.rate ,
            :ltTBL_R_SPECIAL_MCHT.max_fee ,
            :ltTBL_R_SPECIAL_MCHT.min_fee ,
            :ltTBL_R_SPECIAL_MCHT.scan_mode ,
            :ltTBL_R_SPECIAL_MCHT.credit_supp ,
            :ltTBL_R_SPECIAL_MCHT.region_code ,
            :ltTBL_R_SPECIAL_MCHT.max_total_amout ,
            :ltTBL_R_SPECIAL_MCHT.resv ,
            :ltTBL_R_SPECIAL_MCHT.remark ,
            :ltTBL_R_SPECIAL_MCHT.create_tm ,
            :ltTBL_R_SPECIAL_MCHT.create_id ,
            :ltTBL_R_SPECIAL_MCHT.lupd_tm ,
            :ltTBL_R_SPECIAL_MCHT.lupd_id ,
            :ltTBL_R_SPECIAL_MCHT.priority
        );
        break;

    default :
        return DB_DBSFUNCERR;
    }

    return sqlca.sqlcode;
}


int DbsCntTBL_R_SPECIAL_MCHT(int ifunc, struct TBL_R_SPECIAL_MCHT_Def *pTBL_R_SPECIAL_MCHT, char *psCount, int nCntSize)
{
    memcpy(&ltTBL_R_SPECIAL_MCHT, pTBL_R_SPECIAL_MCHT, sizeof(ltTBL_R_SPECIAL_MCHT));

    memset(s_count, 0, sizeof(s_count));

    switch (ifunc) {
    default :
        return DB_DBSFUNCERR;
    }

    return sqlca.sqlcode;
}


int DbsStatTBL_R_SPECIAL_MCHT(int ifunc, struct TBL_R_SPECIAL_MCHT_Def *pTBL_R_SPECIAL_MCHT, char *psCount, int nCntSize)
{
    memcpy(&ltTBL_R_SPECIAL_MCHT, pTBL_R_SPECIAL_MCHT, sizeof(ltTBL_R_SPECIAL_MCHT));

    memset(s_count, 0, sizeof(s_count));

    switch (ifunc) {
    default :
        return DB_DBSFUNCERR;
    }

    return sqlca.sqlcode;
}

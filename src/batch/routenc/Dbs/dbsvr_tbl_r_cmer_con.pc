/*
 *  Copyright 2006, Shanghai Huateng Software Systems Co., Ltd.
 *  All right reserved.
 *
 *  THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF SHANGHAI HUATENG
 *  SOFTWARE SYSTEMS CO., LTD.  THE CONTENTS OF THIS FILE MAY NOT
 *  BE DISCLOSED TO THIRD PARTIES, COPIED OR DUPLICATED IN ANY FORM,
 *  IN WHOLE OR IN PART, WITHOUT THE PRIOR WRITTEN PERMISSION OF
 *  SHANGHAI HUATENG SOFTWARE SYSTEMS CO., LTD.
 *
 *  $Id$
 *
 *  function: table tbl_r_cmer_con operator function
 *
 *  Edit History:
 *
 *    2017/08/15 09:18:27 by gendb
 */
 
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "dbs/dbsdef.h"
EXEC SQL include sqlca;
EXEC SQL include sqlda;


EXEC SQL BEGIN DECLARE SECTION;
struct TBL_R_CMER_CON_Def {
    int        id;    /* 自增ID */
    int        mod_id;    /* 通道商户模型编号 */
    int        grp_num;    /* 条件组序号(同一序号的代表在同一条件组) */
    int        grp_cycle;    /* 条件组周期 */
    char       grp_status[2];    /* 条件组状态 0-未完成 1-本周期已完成 */
    int        attr_num;    /* 条件序号 */
    char       attr_name[21];    /* 条件名 */
    char       oprate[21];    /* 操作 */
    char       value[1025];    /* 条件值 */
    char       resv1[2049];    /* 预留1 */
    char       resv2[2049];    /* 预留2 */
    char       match_flag[2];    /*  */
} ltTBL_R_CMER_CON;
short s_ind;
char  s_count[33];
EXEC SQL END DECLARE SECTION;
/*************************************************************************/
/*    input : DBS_FUNC   the dbs func                                    */
/*            The struct pointer defined in upper.                       */
/*    return : the sqlca.sqlcode                                         */
/*************************************************************************/
int DbsTBL_R_CMER_CON(int ifunc, struct TBL_R_CMER_CON_Def *pTBL_R_CMER_CON)
{
    memcpy(&ltTBL_R_CMER_CON, pTBL_R_CMER_CON, sizeof(ltTBL_R_CMER_CON));

    switch (ifunc) {
    case DBS_INSERT :
        EXEC SQL INSERT INTO tbl_r_cmer_con (
            ID ,
            MOD_ID ,
            GRP_NUM ,
            GRP_CYCLE ,
            GRP_STATUS ,
            ATTR_NUM ,
            ATTR_NAME ,
            OPRATE ,
            VALUE ,
            RESV1 ,
            RESV2 ,
            MATCH_FLAG
        ) VALUES (
            :ltTBL_R_CMER_CON.id ,
            :ltTBL_R_CMER_CON.mod_id ,
            :ltTBL_R_CMER_CON.grp_num ,
            :ltTBL_R_CMER_CON.grp_cycle ,
            :ltTBL_R_CMER_CON.grp_status ,
            :ltTBL_R_CMER_CON.attr_num ,
            :ltTBL_R_CMER_CON.attr_name ,
            :ltTBL_R_CMER_CON.oprate ,
            :ltTBL_R_CMER_CON.value ,
            :ltTBL_R_CMER_CON.resv1 ,
            :ltTBL_R_CMER_CON.resv2 ,
            :ltTBL_R_CMER_CON.match_flag
        );
        break;

    default :
        return DB_DBSFUNCERR;
    }

    return sqlca.sqlcode;
}


int DbsCntTBL_R_CMER_CON(int ifunc, struct TBL_R_CMER_CON_Def *pTBL_R_CMER_CON, char *psCount, int nCntSize)
{
    memcpy(&ltTBL_R_CMER_CON, pTBL_R_CMER_CON, sizeof(ltTBL_R_CMER_CON));

    memset(s_count, 0, sizeof(s_count));

    switch (ifunc) {
    default :
        return DB_DBSFUNCERR;
    }

    return sqlca.sqlcode;
}


int DbsStatTBL_R_CMER_CON(int ifunc, struct TBL_R_CMER_CON_Def *pTBL_R_CMER_CON, char *psCount, int nCntSize)
{
    memcpy(&ltTBL_R_CMER_CON, pTBL_R_CMER_CON, sizeof(ltTBL_R_CMER_CON));

    memset(s_count, 0, sizeof(s_count));

    switch (ifunc) {
    default :
        return DB_DBSFUNCERR;
    }

    return sqlca.sqlcode;
}
